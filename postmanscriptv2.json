    {
        "info": {
        "name": "Author Dashboard API",
        "description": "Collection for testing the Author Dashboard API endpoints",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:3000/api",
            "type": "string"
        },
        {
            "key": "authToken",
            "value": "",
            "type": "string"
        }
        ],
        "item": [
        {
            "name": "Authentication",
            "description": "Authentication related endpoints",
            "item": [
            {
                "name": "Register",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/auth/register",
                "header": [
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"Test Author\",\n  \"email\": \"author@example.com\",\n  \"password\": \"password123\",\n  \"phoneNumber\": \"+911234567890\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 201\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"Response has token\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.token).to.exist;",
                        "    pm.environment.set(\"authToken\", jsonData.token);",
                        "    pm.collectionVariables.set(\"authToken\", jsonData.token);",
                        "});",
                        "",
                        "pm.test(\"User data is returned\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.user).to.exist;",
                        "    pm.expect(jsonData.user.name).to.eql(\"Test Author\");",
                        "    pm.expect(jsonData.user.email).to.eql(\"author@example.com\");",
                        "    pm.expect(jsonData.user.password).to.not.exist;",
                        "    ",
                        "    // Save user ID for future requests",
                        "    if (jsonData.user._id) {",
                        "        pm.environment.set(\"userId\", jsonData.user._id);",
                        "        pm.collectionVariables.set(\"userId\", jsonData.user._id);",
                        "    }",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Login",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/auth/login",
                "header": [
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"author@example.com\",\n  \"password\": \"password123\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response has token\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.token).to.exist;",
                        "    pm.environment.set(\"authToken\", jsonData.token);",
                        "    pm.collectionVariables.set(\"authToken\", jsonData.token);",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get Profile",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/auth/profile",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Profile data is valid\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.name).to.exist;",
                        "    pm.expect(jsonData.email).to.exist;",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Update Profile",
                "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/auth/profile",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"Updated Author Name\",\n  \"phoneNumber\": \"+911234567890\",\n  \"about\": \"I am an author who writes fiction books.\",\n  \"address\": {\n    \"street\": \"123 Author Lane\",\n    \"city\": \"Booktown\",\n    \"state\": \"Reading\",\n    \"country\": \"India\",\n    \"zipCode\": \"110001\"\n  },\n  \"bankAccount\": {\n    \"accountNumber\": \"1234567890\",\n    \"ifscCode\": \"ABCD0001234\",\n    \"bankName\": \"Book Bank\"\n  }\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Profile updated successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.eql(\"Profile updated successfully\");",
                        "    pm.expect(jsonData.user.name).to.eql(\"Updated Author Name\");",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Forgot Password",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/auth/forgot-password",
                "header": [
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"author@example.com\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Password reset instructions sent\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.include(\"Password reset instructions sent\");",
                        "});"
                    ]
                    }
                }
                ]
            }
            ]
        },
        {
            "name": "Books",
            "description": "Book management endpoints",
            "item": [
            {
                "name": "Create Book",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/books",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"The Great Novel\",\n  \"price\": 499,\n  \"authorCopyPrice\": 299,\n  \"stock\": 100,\n  \"category\": \"Fiction\",\n  \"isbn\": \"978-3-16-148410-0\",\n  \"publication\": {\n    \"publicationId\": \"PUBL001\",\n    \"publishedDate\": \"2023-01-15\",\n    \"description\": \"A great story about adventure and mystery.\"\n  },\n  \"coverType\": \"Paperback\",\n  \"pageSize\": \"A5\",\n  \"interiorColor\": \"Black & White\",\n  \"language\": \"English\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 201\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"Book created successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.eql(\"Book created successfully\");",
                        "    pm.expect(jsonData.book).to.exist;",
                        "    pm.expect(jsonData.book.title).to.eql(\"The Great Novel\");",
                        "    ",
                        "    // Save book ID for future requests",
                        "    if (jsonData.book._id) {",
                        "        pm.environment.set(\"bookId\", jsonData.book._id);",
                        "        pm.collectionVariables.set(\"bookId\", jsonData.book._id);",
                        "    }",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get All Books",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/books",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ],
                "query": [
                    {
                    "key": "page",
                    "value": "1"
                    },
                    {
                    "key": "limit",
                    "value": "10"
                    },
                    {
                    "key": "category",
                    "value": "Fiction",
                    "disabled": true
                    },
                    {
                    "key": "search",
                    "value": "novel",
                    "disabled": true
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Response contains books array\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.books).to.exist.and.to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get Book by ID",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/books/{{bookId}}",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Book details are correct\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData._id).to.eql(pm.collectionVariables.get(\"bookId\"));",
                        "    pm.expect(jsonData.title).to.exist;",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Update Book",
                "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/books/{{bookId}}",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"title\": \"The Great Novel - Updated\",\n  \"price\": 599,\n  \"stock\": 150,\n  \"marketplaceLinks\": {\n    \"amazon\": \"https://amazon.com/book/123\",\n    \"flipkart\": \"https://flipkart.com/book/123\"\n  }\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Book updated successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.eql(\"Book updated successfully\");",
                        "    pm.expect(jsonData.book.title).to.eql(\"The Great Novel - Updated\");",
                        "    pm.expect(jsonData.book.price).to.eql(599);",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Update Author Price",
                "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/books/{{bookId}}/author-price",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"price\": 350\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Author price updated\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.include(\"Author price updated\");",
                        "    pm.expect(jsonData.book.authorCopyPrice).to.eql(350);",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get Dashboard Stats",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/books/dashboard",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Dashboard stats exist\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.totalRoyaltyEarned).to.exist;",
                        "    pm.expect(jsonData.books).to.exist.and.to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Upload Cover Image",
                "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/books/{{bookId}}/cover",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ],
                "body": {
                    "mode": "formdata",
                    "formdata": [
                    {
                        "key": "coverImage",
                        "type": "file",
                        "src": "/path/to/image.jpg"
                    }
                    ]
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Cover image updated\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.include(\"Cover image updated\");",
                        "    pm.expect(jsonData.coverImage).to.exist;",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Delete Book",
                "request": {
                "method": "DELETE",
                "url": "{{baseUrl}}/books/{{bookId}}",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Book deleted successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.eql(\"Book deleted successfully\");",
                        "});"
                    ]
                    }
                }
                ]
            }
            ]
        },
        {
            "name": "Orders",
            "description": "Order management endpoints",
            "item": [
            {
                "name": "Create Order",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/orders",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"bookId\": \"{{bookId}}\",\n  \"quantity\": 5,\n  \"paymentMethod\": \"wallet\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 201\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"Order created successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.exist;",
                        "    pm.expect(jsonData.order).to.exist;",
                        "    ",
                        "    // Save order ID for future requests",
                        "    if (jsonData.order._id) {",
                        "        pm.environment.set(\"orderId\", jsonData.order._id);",
                        "        pm.collectionVariables.set(\"orderId\", jsonData.order._id);",
                        "    }",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get My Orders",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/orders/my-orders",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Orders list received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            }
            ]
        },
        {
            "name": "Royalties",
            "description": "Royalty management endpoints",
            "item": [
            {
                "name": "Get Royalties",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/royalties",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Royalties list received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Request Payout",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/royalties/request",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"amount\": 1000,\n  \"paymentMethod\": \"bank_transfer\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 201\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"Payout request submitted\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.include(\"Payout request submitted\");",
                        "    pm.expect(jsonData.royalty).to.exist;",
                        "    ",
                        "    // Save royalty ID for future requests",
                        "    if (jsonData.royalty._id) {",
                        "        pm.environment.set(\"royaltyId\", jsonData.royalty._id);",
                        "        pm.collectionVariables.set(\"royaltyId\", jsonData.royalty._id);",
                        "    }",
                        "});"
                    ]
                    }
                }
                ]
            }
            ]
        },
        {
            "name": "Print Logs",
            "description": "Print log management endpoints",
            "item": [
            {
                "name": "Create Print Log",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/prints",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"bookId\": \"{{bookId}}\",\n  \"printDate\": \"2023-03-15\",\n  \"quantity\": 100,\n  \"pressName\": \"Delhi Press\",\n  \"cost\": 15000,\n  \"edition\": \"First Edition\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 201\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"Print log created\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData._id).to.exist;",
                        "    pm.environment.set(\"printLogId\", jsonData._id);",
                        "    pm.collectionVariables.set(\"printLogId\", jsonData._id);",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get Print Logs",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/prints",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Print logs received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            }
            ]
        },
        {
            "name": "Notifications",
            "description": "Notification management endpoints",
            "item": [
            {
                "name": "Get Notifications",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/notifications",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Notifications received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Mark Notification as Read",
                "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/notifications/{{notificationId}}/read",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Notification marked as read\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.read).to.be.true;",
                        "});"
                    ]
                    }
                }
                ]
            }
            ]
        },
        {
            "name": "Admin",
            "description": "Admin endpoints",
            "item": [
            {
                "name": "Get All Users",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/admin/users",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Users list received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get All Books (Admin)",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/admin/books",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Books list received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Update User (Admin)",
                "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/admin/users/{{userId}}",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"Updated User Name\",\n  \"role\": \"author\",\n  \"kycStatus\": \"approved\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"User updated successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.eql(\"User updated successfully\");",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Approve KYC",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/admin/kyc/approve/{{userId}}",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"status\": \"approved\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"KYC approved successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.include(\"KYC approved\");",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get Pending KYCs",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/admin/kyc",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Pending KYCs received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Approve Royalty Payout",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/admin/royalties/{{royaltyId}}/approve",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Payout approved successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.include(\"Payout approved\");",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Reject Royalty Payout",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/admin/royalties/{{royaltyId}}/reject",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"rejectionReason\": \"Insufficient documentation provided\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Payout rejected successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.include(\"Payout rejected\");",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get All Orders (Admin)",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/admin/orders",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Orders received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get Print Logs (Admin)",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/admin/print-logs",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Print logs received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Get Payout History (Admin)",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}/admin/payouts/history",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    }
                ]
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"Payout history received\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.an('array');",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Send Admin Notification",
                "request": {
                "method": "POST",
                "url": "{{baseUrl}}/notifications/admin",
                "header": [
                    {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                    },
                    {
                    "key": "Content-Type",
                    "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"authorId\": \"{{userId}}\",\n  \"message\": \"Your book has been reviewed and is ready for publishing.\"\n}"
                }
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "pm.test(\"Status code is 201\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"Notification sent successfully\", function () {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.message).to.eql(\"Notification sent\");",
                        "});"
                    ]
                    }
                }
                ]
            }
            ]
        },
        {
            "name": "Pre-request Scripts",
            "description": "Common scripts that can be added to the collection pre-request script",
            "item": [
            {
                "name": "Set Environment Variables",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}",
                "header": []
                },
                "event": [
                {
                    "listen": "prerequest",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "// This can be added to the collection pre-request script",
                        "pm.collectionVariables.set(\"baseUrl\", \"http://localhost:3000/api\");",
                        "",
                        "// Set request timestamp for tracking",
                        "pm.variables.set(\"requestTimestamp\", new Date().toISOString());"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Auth Token Handling",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}",
                "header": []
                },
                "event": [
                {
                    "listen": "prerequest",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "// This can be added to the collection pre-request script to handle token refresh",
                        "if (pm.collectionVariables.get(\"authToken\")) {",
                        "    // Check if token is about to expire (you might need to decode JWT)",
                        "    // If token is close to expiration, refresh it",
                        "    // This is pseudo-code - you would need actual token expiry check",
                        "    /*",
                        "    if (tokenIsExpiring) {",
                        "        pm.sendRequest({",
                        "            url: pm.collectionVariables.get(\"baseUrl\") + \"/auth/refresh-token\",",
                        "            method: \"POST\",",
                        "            header: {",
                        "                \"Content-Type\": \"application/json\",",
                        "                \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\")",
                        "            }",
                        "        }, function (err, res) {",
                        "            if (!err && res.code === 200) {",
                        "                var responseJson = res.json();",
                        "                if (responseJson.token) {",
                        "                    pm.collectionVariables.set(\"authToken\", responseJson.token);",
                        "                }",
                        "            }",
                        "        });",
                        "    }",
                        "    */",
                        "}"
                    ]
                    }
                }
                ]
            }
            ]
        },
        {
            "name": "Collection Tests",
            "description": "Common tests that can be added to the collection tests",
            "item": [
            {
                "name": "Response Time Test",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}",
                "header": []
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "// This can be added to the collection tests",
                        "pm.test(\"Response time is acceptable\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                        "});",
                        "",
                        "// Check if response is valid JSON",
                        "pm.test(\"Response is valid JSON\", function() {",
                        "    if (pm.response.headers.get(\"Content-Type\") && ",
                        "        pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
                        "        try {",
                        "            pm.response.json();",
                        "            pm.expect(true).to.be.true;",
                        "        } catch (e) {",
                        "            pm.expect(false).to.be.true;",
                        "        }",
                        "    }",
                        "});"
                    ]
                    }
                }
                ]
            },
            {
                "name": "Error Response Structure Test",
                "request": {
                "method": "GET",
                "url": "{{baseUrl}}",
                "header": []
                },
                "event": [
                {
                    "listen": "test",
                    "script": {
                    "type": "text/javascript",
                    "exec": [
                        "// This can be added to the collection tests to verify error response structure",
                        "if (pm.response.code >= 400) {",
                        "    pm.test(\"Error response has the correct structure\", function () {",
                        "        var jsonData = pm.response.json();",
                        "        pm.expect(jsonData.message).to.exist;",
                        "    });",
                        "}"
                    ]
                    }
                }
                ]
            }
            ]
        }
    ]
}

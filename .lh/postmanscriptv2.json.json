{
    "sourceFile": "postmanscriptv2.json",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1741725014430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741725056507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -712,8 +712,9 @@\n                 }\n               ],\n               \"body\": {\n                 \"mode\": \"raw\",\n+                \"raw\": \"{\\n  \\\"monthlyRevenue\\\": [1500, 2000, 1800],\\n  \\\"yearlyPerformance\\\": [\\n    {\\n      \\\"year\\\": 2024,\\n      \\\"monthlyRevenue\\\": [\\n        {\\\"month\\\": 1, \\\"revenue\\\": 5000},\\n        {\\\"month\\\": 2, \\\"revenue\\\": 6000}\\n      ]\\n    }\\n  ]\\n}\"\n                 \"raw\": \"{\\n  \\\"monthly\\\": 15000,\\n  \\\"yearly\\\": 180000\\n}\"\n               }\n             },\n             \"event\": [\n"
                },
                {
                    "date": 1741725076990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -713,9 +713,8 @@\n               ],\n               \"body\": {\n                 \"mode\": \"raw\",\n                 \"raw\": \"{\\n  \\\"monthlyRevenue\\\": [1500, 2000, 1800],\\n  \\\"yearlyPerformance\\\": [\\n    {\\n      \\\"year\\\": 2024,\\n      \\\"monthlyRevenue\\\": [\\n        {\\\"month\\\": 1, \\\"revenue\\\": 5000},\\n        {\\\"month\\\": 2, \\\"revenue\\\": 6000}\\n      ]\\n    }\\n  ]\\n}\"\n-                \"raw\": \"{\\n  \\\"monthly\\\": 15000,\\n  \\\"yearly\\\": 180000\\n}\"\n               }\n             },\n             \"event\": [\n               {\n@@ -725,12 +724,13 @@\n                   \"exec\": [\n                     \"pm.test(\\\"Status code is 200\\\", function () {\",\n                     \"    pm.response.to.have.status(200);\",\n                     \"});\",\n-                    \"pm.test(\\\"Revenue updated\\\", function () {\",\n+                    \"pm.test(\\\"Revenue data updated\\\", function () {\",\n                     \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.revenue.monthly).to.eql(15000);\",\n-                    \"    pm.expect(jsonData.revenue.yearly).to.eql(180000);\",\n+                    \"    pm.expect(jsonData.user.monthlyRevenue).to.be.an('array');\",\n+                    \"    pm.expect(jsonData.user.yearlyPerformance).to.be.an('array');\",\n+                    \"    pm.expect(jsonData.user.yearlyPerformance[0].monthlyRevenue[0].revenue).to.eql(5000);\",\n                     \"});\"\n                   ]\n                 }\n               }\n"
                },
                {
                    "date": 1741725910916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,895 +1,1 @@\n-{\n-    \"info\": {\n-      \"name\": \"Author Dashboard API\",\n-      \"description\": \"Collection for testing the Author Dashboard API endpoints\",\n-      \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n-    },\n-    \"variable\": [\n-      {\n-        \"key\": \"baseUrl\",\n-        \"value\": \"http://localhost:3000/api\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"authToken\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"adminToken\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"userId\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"bookId\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"orderId\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"royaltyId\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      }\n-    ],\n-    \"item\": [\n-      {\n-        \"name\": \"Authentication\",\n-        \"description\": \"Authentication related endpoints\",\n-        \"item\": [\n-          {\n-            \"name\": \"Register\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/auth/register\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"name\\\": \\\"Test Author\\\",\\n  \\\"email\\\": \\\"author@example.com\\\",\\n  \\\"password\\\": \\\"password123\\\",\\n  \\\"phoneNumber\\\": \\\"+911234567890\\\"\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 201\\\", function () {\",\n-                    \"    pm.response.to.have.status(201);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Response has token\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.token).to.exist;\",\n-                    \"    pm.environment.set(\\\"authToken\\\", jsonData.token);\",\n-                    \"    pm.collectionVariables.set(\\\"authToken\\\", jsonData.token);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"User data is returned\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.user).to.exist;\",\n-                    \"    pm.expect(jsonData.user.name).to.eql(\\\"Test Author\\\");\",\n-                    \"    pm.expect(jsonData.user.email).to.eql(\\\"author@example.com\\\");\",\n-                    \"    pm.expect(jsonData.user.password).to.not.exist;\",\n-                    \"    \",\n-                    \"    if (jsonData.user._id) {\",\n-                    \"        pm.environment.set(\\\"userId\\\", jsonData.user._id);\",\n-                    \"        pm.collectionVariables.set(\\\"userId\\\", jsonData.user._id);\",\n-                    \"    }\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Login\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/auth/login\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"email\\\": \\\"author@example.com\\\",\\n  \\\"password\\\": \\\"password123\\\"\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Login successful\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.user.email).to.eql(\\\"author@example.com\\\");\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Response has token\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.token).to.exist;\",\n-                    \"    pm.environment.set(\\\"authToken\\\", jsonData.token);\",\n-                    \"    pm.collectionVariables.set(\\\"authToken\\\", jsonData.token);\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Get Profile\",\n-            \"request\": {\n-              \"method\": \"GET\",\n-              \"url\": \"{{baseUrl}}/auth/profile\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ]\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Profile data is valid\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.name).to.exist;\",\n-                    \"    pm.expect(jsonData.email).to.exist;\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Update Profile\",\n-            \"request\": {\n-              \"method\": \"PUT\",\n-              \"url\": \"{{baseUrl}}/auth/profile\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                },\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"name\\\": \\\"Updated Author Name\\\",\\n  \\\"phoneNumber\\\": \\\"+911234567890\\\",\\n  \\\"about\\\": \\\"I am an author who writes fiction books.\\\",\\n  \\\"address\\\": {\\n    \\\"street\\\": \\\"123 Author Lane\\\",\\n    \\\"city\\\": \\\"Booktown\\\",\\n    \\\"state\\\": \\\"Reading\\\",\\n    \\\"country\\\": \\\"India\\\",\\n    \\\"zipCode\\\": \\\"110001\\\"\\n  },\\n  \\\"bankAccount\\\": {\\n    \\\"accountNumber\\\": \\\"1234567890\\\",\\n    \\\"ifscCode\\\": \\\"ABCD0001234\\\",\\n    \\\"bankName\\\": \\\"Book Bank\\\"\\n  }\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Profile updated successfully\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.message).to.eql(\\\"Profile updated successfully\\\");\",\n-                    \"    pm.expect(jsonData.user.name).to.eql(\\\"Updated Author Name\\\");\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Forgot Password\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/auth/forgot-password\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"email\\\": \\\"author@example.com\\\"\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Password reset instructions sent\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.message).to.include(\\\"Password reset instructions sent\\\");\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          }\n-        ]\n-      },\n-      {\n-        \"name\": \"Books\",\n-        \"description\": \"Book management endpoints\",\n-        \"item\": [\n-          {\n-            \"name\": \"Create Book\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/books\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                },\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"title\\\": \\\"The Great Novel\\\",\\n  \\\"price\\\": 499,\\n  \\\"authorCopyPrice\\\": 299,\\n  \\\"stock\\\": 100,\\n  \\\"category\\\": \\\"Fiction\\\",\\n  \\\"isbn\\\": \\\"978-3-16-148410-0\\\",\\n  \\\"publication\\\": {\\n    \\\"publicationId\\\": \\\"PUBL001\\\",\\n    \\\"publishedDate\\\": \\\"2023-01-15\\\",\\n    \\\"description\\\": \\\"A great story about adventure and mystery.\\\"\\n  },\\n  \\\"coverType\\\": \\\"Paperback\\\",\\n  \\\"pageSize\\\": \\\"A5\\\",\\n  \\\"interiorColor\\\": \\\"Black & White\\\",\\n  \\\"language\\\": \\\"English\\\"\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 201\\\", function () {\",\n-                    \"    pm.response.to.have.status(201);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Book created successfully\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.message).to.eql(\\\"Book created successfully\\\");\",\n-                    \"    pm.expect(jsonData.book).to.exist;\",\n-                    \"    pm.expect(jsonData.book.title).to.eql(\\\"The Great Novel\\\");\",\n-                    \"    \",\n-                    \"    if (jsonData.book._id) {\",\n-                    \"        pm.environment.set(\\\"bookId\\\", jsonData.book._id);\",\n-                    \"        pm.collectionVariables.set(\\\"bookId\\\", jsonData.book._id);\",\n-                    \"    }\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Get All Books\",\n-            \"request\": {\n-              \"method\": \"GET\",\n-              \"url\": \"{{baseUrl}}/books\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ],\n-              \"query\": [\n-                {\n-                  \"key\": \"page\",\n-                  \"value\": \"1\"\n-                },\n-                {\n-                  \"key\": \"limit\",\n-                  \"value\": \"10\"\n-                },\n-                {\n-                  \"key\": \"category\",\n-                  \"value\": \"Fiction\",\n-                  \"disabled\": true\n-                },\n-                {\n-                  \"key\": \"search\",\n-                  \"value\": \"novel\",\n-                  \"disabled\": true\n-                }\n-              ]\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Response contains books array\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.books).to.exist.and.to.be.an('array');\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Get Book by ID\",\n-            \"request\": {\n-              \"method\": \"GET\",\n-              \"url\": \"{{baseUrl}}/books/{{bookId}}\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ]\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Book details are correct\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData._id).to.eql(pm.collectionVariables.get(\\\"bookId\\\"));\",\n-                    \"    pm.expect(jsonData.title).to.exist;\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Update Book\",\n-            \"request\": {\n-              \"method\": \"PUT\",\n-              \"url\": \"{{baseUrl}}/books/{{bookId}}\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                },\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"title\\\": \\\"The Great Novel - Updated\\\",\\n  \\\"price\\\": 599,\\n  \\\"stock\\\": 150,\\n  \\\"marketplaceLinks\\\": {\\n    \\\"amazon\\\": \\\"https://amazon.com/book/123\\\",\\n    \\\"flipkart\\\": \\\"https://flipkart.com/book/123\\\"\\n  }\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Book updated successfully\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.message).to.eql(\\\"Book updated successfully\\\");\",\n-                    \"    pm.expect(jsonData.book.title).to.eql(\\\"The Great Novel - Updated\\\");\",\n-                    \"    pm.expect(jsonData.book.price).to.eql(599);\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Update Author Price\",\n-            \"request\": {\n-              \"method\": \"PUT\",\n-              \"url\": \"{{baseUrl}}/books/{{bookId}}/author-price\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                },\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"price\\\": 350\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Author price updated\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.message).to.include(\\\"Author price updated\\\");\",\n-                    \"    pm.expect(jsonData.book.authorCopyPrice).to.eql(350);\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Get Dashboard Stats\",\n-            \"request\": {\n-              \"method\": \"GET\",\n-              \"url\": \"{{baseUrl}}/books/dashboard\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ]\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Dashboard stats exist\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.totalRoyaltyEarned).to.exist;\",\n-                    \"    pm.expect(jsonData.books).to.exist.and.to.be.an('array');\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Upload Cover Image\",\n-            \"request\": {\n-              \"method\": \"PUT\",\n-              \"url\": \"{{baseUrl}}/books/{{bookId}}/cover\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"formdata\",\n-                \"formdata\": [\n-                  {\n-                    \"key\": \"coverImage\",\n-                    \"type\": \"file\",\n-                    \"src\": \"/path/to/image.jpg\"\n-                  }\n-                ]\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"\",\n-                    \"pm.test(\\\"Cover image updated\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.message).to.include(\\\"Cover image updated\\\");\",\n-                    \"    pm.expect(jsonData.coverImage).to.exist;\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Delete Book\",\n-            \"request\": {\n-              \"method\": \"DELETE\",\n-              \"url\": \"{{baseUrl}}/(Due to technical issues, the search service is temporarily unavailable.)\n-  \n-  Here's the complete Postman collection script with all endpoints and fixes:\n-  \n-  ```json\n-  {\n-    \"info\": {\n-      \"name\": \"Author Dashboard API\",\n-      \"description\": \"Collection for testing the Author Dashboard API endpoints\",\n-      \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n-    },\n-    \"variable\": [\n-      {\n-        \"key\": \"baseUrl\",\n-        \"value\": \"http://localhost:3000/api\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"authToken\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"adminToken\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"userId\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"bookId\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"orderId\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      },\n-      {\n-        \"key\": \"royaltyId\",\n-        \"value\": \"\",\n-        \"type\": \"string\"\n-      }\n-    ],\n-    \"item\": [\n-      {\n-        \"name\": \"Authentication\",\n-        \"item\": [\n-          {\n-            \"name\": \"Register\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/auth/register\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"name\\\": \\\"Test Author\\\",\\n  \\\"email\\\": \\\"author@example.com\\\",\\n  \\\"password\\\": \\\"password123\\\",\\n  \\\"phoneNumber\\\": \\\"+911234567890\\\"\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 201\\\", function () {\",\n-                    \"    pm.response.to.have.status(201);\",\n-                    \"});\",\n-                    \"pm.test(\\\"Response has token\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.token).to.exist;\",\n-                    \"    pm.collectionVariables.set(\\\"authToken\\\", jsonData.token);\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Login\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/auth/login\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"email\\\": \\\"author@example.com\\\",\\n  \\\"password\\\": \\\"password123\\\"\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"pm.test(\\\"Login successful\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.token).to.exist;\",\n-                    \"    pm.collectionVariables.set(\\\"authToken\\\", jsonData.token);\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          }\n-        ]\n-      },\n-      {\n-        \"name\": \"Admin\",\n-        \"item\": [\n-          {\n-            \"name\": \"Get All Users\",\n-            \"request\": {\n-              \"method\": \"GET\",\n-              \"url\": \"{{baseUrl}}/admin/users\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{adminToken}}\"\n-                }\n-              ]\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"pm.test(\\\"Users list received\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData).to.be.an('array');\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Update User Revenue\",\n-            \"request\": {\n-              \"method\": \"PUT\",\n-              \"url\": \"{{baseUrl}}/admin/users/{{userId}}/revenue\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{adminToken}}\"\n-                },\n-                {\n-                  \"key\": \"Content-Type\",\n-                  \"value\": \"application/json\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"monthlyRevenue\\\": [1500, 2000, 1800],\\n  \\\"yearlyPerformance\\\": [\\n    {\\n      \\\"year\\\": 2024,\\n      \\\"monthlyRevenue\\\": [\\n        {\\\"month\\\": 1, \\\"revenue\\\": 5000},\\n        {\\\"month\\\": 2, \\\"revenue\\\": 6000}\\n      ]\\n    }\\n  ]\\n}\"\n-              }\n-            },\n-            \"event\": [\n-              {\n-                \"listen\": \"test\",\n-                \"script\": {\n-                  \"type\": \"text/javascript\",\n-                  \"exec\": [\n-                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n-                    \"    pm.response.to.have.status(200);\",\n-                    \"});\",\n-                    \"pm.test(\\\"Revenue data updated\\\", function () {\",\n-                    \"    var jsonData = pm.response.json();\",\n-                    \"    pm.expect(jsonData.user.monthlyRevenue).to.be.an('array');\",\n-                    \"    pm.expect(jsonData.user.yearlyPerformance).to.be.an('array');\",\n-                    \"    pm.expect(jsonData.user.yearlyPerformance[0].monthlyRevenue[0].revenue).to.eql(5000);\",\n-                    \"});\"\n-                  ]\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Manage KYC\",\n-            \"item\": [\n-              {\n-                \"name\": \"Get Pending KYCs\",\n-                \"request\": {\n-                  \"method\": \"GET\",\n-                  \"url\": \"{{baseUrl}}/admin/kyc\",\n-                  \"header\": [\n-                    {\n-                      \"key\": \"Authorization\",\n-                      \"value\": \"Bearer {{adminToken}}\"\n-                    }\n-                  ]\n-                }\n-              },\n-              {\n-                \"name\": \"Approve KYC\",\n-                \"request\": {\n-                  \"method\": \"POST\",\n-                  \"url\": \"{{baseUrl}}/admin/kyc/approve/{{userId}}\",\n-                  \"header\": [\n-                    {\n-                      \"key\": \"Authorization\",\n-                      \"value\": \"Bearer {{adminToken}}\"\n-                    }\n-                  ],\n-                  \"body\": {\n-                    \"mode\": \"raw\",\n-                    \"raw\": \"{\\n  \\\"status\\\": \\\"approved\\\"\\n}\"\n-                  }\n-                }\n-              }\n-            ]\n-          },\n-          {\n-            \"name\": \"Royalty Management\",\n-            \"item\": [\n-              {\n-                \"name\": \"Approve Payout\",\n-                \"request\": {\n-                  \"method\": \"POST\",\n-                  \"url\": \"{{baseUrl}}/admin/royalties/{{royaltyId}}/approve\",\n-                  \"header\": [\n-                    {\n-                      \"key\": \"Authorization\",\n-                      \"value\": \"Bearer {{adminToken}}\"\n-                    }\n-                  ]\n-                }\n-              },\n-              {\n-                \"name\": \"Reject Payout\",\n-                \"request\": {\n-                  \"method\": \"POST\",\n-                  \"url\": \"{{baseUrl}}/admin/royalties/{{royaltyId}}/reject\",\n-                  \"header\": [\n-                    {\n-                      \"key\": \"Authorization\",\n-                      \"value\": \"Bearer {{adminToken}}\"\n-                    }\n-                  ],\n-                  \"body\": {\n-                    \"mode\": \"raw\",\n-                    \"raw\": \"{\\n  \\\"rejectionReason\\\": \\\"Insufficient documentation\\\"\\n}\"\n-                  }\n-                }\n-              }\n-            ]\n-          }\n-        ]\n-      },\n-      {\n-        \"name\": \"Books\",\n-        \"item\": [\n-          {\n-            \"name\": \"Create Book\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/books\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"title\\\": \\\"Sample Book\\\",\\n  \\\"price\\\": 299\\n}\"\n-              }\n-            }\n-          },\n-          {\n-            \"name\": \"Update Book\",\n-            \"request\": {\n-              \"method\": \"PUT\",\n-              \"url\": \"{{baseUrl}}/books/{{bookId}}\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"price\\\": 399\\n}\"\n-              }\n-            }\n-          }\n-        ]\n-      },\n-      {\n-        \"name\": \"Orders\",\n-        \"item\": [\n-          {\n-            \"name\": \"Create Order\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/orders\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"bookId\\\": \\\"{{bookId}}\\\",\\n  \\\"quantity\\\": 2\\n}\"\n-              }\n-            }\n-          }\n-        ]\n-      },\n-      {\n-        \"name\": \"Royalties\",\n-        \"item\": [\n-          {\n-            \"name\": \"Request Payout\",\n-            \"request\": {\n-              \"method\": \"POST\",\n-              \"url\": \"{{baseUrl}}/royalties/request\",\n-              \"header\": [\n-                {\n-                  \"key\": \"Authorization\",\n-                  \"value\": \"Bearer {{authToken}}\"\n-                }\n-              ],\n-              \"body\": {\n-                \"mode\": \"raw\",\n-                \"raw\": \"{\\n  \\\"amount\\\": 1000\\n}\"\n-              }\n-            }\n-          }\n-        ]\n-      }\n-    ]\n-  }\n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741725983307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -803,5 +803,569 @@\n             \"event\": [\n               {\n                 \"listen\": \"test\",\n                 \"script\": {\n-                  \"type\n\\ No newline at end of file\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Notifications received\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData).to.be.an('array');\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Mark Notification as Read\",\n+            \"request\": {\n+              \"method\": \"PUT\",\n+              \"url\": \"{{baseUrl}}/notifications/{{notificationId}}/read\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{authToken}}\"\n+                }\n+              ]\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Notification marked as read\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData.read).to.be.true;\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        ]\n+      },\n+      {\n+        \"name\": \"Admin\",\n+        \"description\": \"Admin endpoints\",\n+        \"item\": [\n+          {\n+            \"name\": \"Get All Users\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}/admin/users\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                }\n+              ]\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Users list received\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData).to.be.an('array');\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Get All Books (Admin)\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}/admin/books\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                }\n+              ]\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Books list received\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData).to.be.an('array');\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Update User (Admin)\",\n+            \"request\": {\n+              \"method\": \"PUT\",\n+              \"url\": \"{{baseUrl}}/admin/users/{{userId}}\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                },\n+                {\n+                  \"key\": \"Content-Type\",\n+                  \"value\": \"application/json\"\n+                }\n+              ],\n+              \"body\": {\n+                \"mode\": \"raw\",\n+                \"raw\": \"{\\n  \\\"name\\\": \\\"Updated User Name\\\",\\n  \\\"role\\\": \\\"author\\\",\\n  \\\"kycStatus\\\": \\\"approved\\\"\\n}\"\n+              }\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"User updated successfully\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData.message).to.eql(\\\"User updated successfully\\\");\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Approve KYC\",\n+            \"request\": {\n+              \"method\": \"POST\",\n+              \"url\": \"{{baseUrl}}/admin/kyc/approve/{{userId}}\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                },\n+                {\n+                  \"key\": \"Content-Type\",\n+                  \"value\": \"application/json\"\n+                }\n+              ],\n+              \"body\": {\n+                \"mode\": \"raw\",\n+                \"raw\": \"{\\n  \\\"status\\\": \\\"approved\\\"\\n}\"\n+              }\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"KYC approved successfully\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData.message).to.include(\\\"KYC approved\\\");\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Get Pending KYCs\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}/admin/kyc\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                }\n+              ]\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Pending KYCs received\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData).to.be.an('array');\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Approve Royalty Payout\",\n+            \"request\": {\n+              \"method\": \"POST\",\n+              \"url\": \"{{baseUrl}}/admin/royalties/{{royaltyId}}/approve\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                }\n+              ]\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Payout approved successfully\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData.message).to.include(\\\"Payout approved\\\");\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Reject Royalty Payout\",\n+            \"request\": {\n+              \"method\": \"POST\",\n+              \"url\": \"{{baseUrl}}/admin/royalties/{{royaltyId}}/reject\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                },\n+                {\n+                  \"key\": \"Content-Type\",\n+                  \"value\": \"application/json\"\n+                }\n+              ],\n+              \"body\": {\n+                \"mode\": \"raw\",\n+                \"raw\": \"{\\n  \\\"rejectionReason\\\": \\\"Insufficient documentation provided\\\"\\n}\"\n+              }\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Payout rejected successfully\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData.message).to.include(\\\"Payout rejected\\\");\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Get All Orders (Admin)\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}/admin/orders\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                }\n+              ]\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Orders received\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData).to.be.an('array');\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Get Print Logs (Admin)\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}/admin/print-logs\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                }\n+              ]\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Print logs received\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData).to.be.an('array');\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Get Payout History (Admin)\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}/admin/payouts/history\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                }\n+              ]\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n+                    \"    pm.response.to.have.status(200);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Payout history received\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData).to.be.an('array');\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Send Admin Notification\",\n+            \"request\": {\n+              \"method\": \"POST\",\n+              \"url\": \"{{baseUrl}}/notifications/admin\",\n+              \"header\": [\n+                {\n+                  \"key\": \"Authorization\",\n+                  \"value\": \"Bearer {{adminToken}}\"\n+                },\n+                {\n+                  \"key\": \"Content-Type\",\n+                  \"value\": \"application/json\"\n+                }\n+              ],\n+              \"body\": {\n+                \"mode\": \"raw\",\n+                \"raw\": \"{\\n  \\\"authorId\\\": \\\"{{userId}}\\\",\\n  \\\"message\\\": \\\"Your book has been reviewed and is ready for publishing.\\\"\\n}\"\n+              }\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"pm.test(\\\"Status code is 201\\\", function () {\",\n+                    \"    pm.response.to.have.status(201);\",\n+                    \"});\",\n+                    \"\",\n+                    \"pm.test(\\\"Notification sent successfully\\\", function () {\",\n+                    \"    var jsonData = pm.response.json();\",\n+                    \"    pm.expect(jsonData.message).to.eql(\\\"Notification sent\\\");\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        ]\n+      },\n+      {\n+        \"name\": \"Pre-request Scripts\",\n+        \"description\": \"Common scripts that can be added to the collection pre-request script\",\n+        \"item\": [\n+          {\n+            \"name\": \"Set Environment Variables\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}\",\n+              \"header\": []\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"prerequest\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"// This can be added to the collection pre-request script\",\n+                    \"pm.collectionVariables.set(\\\"baseUrl\\\", \\\"http://localhost:3000/api\\\");\",\n+                    \"\",\n+                    \"// Set request timestamp for tracking\",\n+                    \"pm.variables.set(\\\"requestTimestamp\\\", new Date().toISOString());\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Auth Token Handling\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}\",\n+              \"header\": []\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"prerequest\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"// This can be added to the collection pre-request script to handle token refresh\",\n+                    \"if (pm.collectionVariables.get(\\\"authToken\\\")) {\",\n+                    \"    // Check if token is about to expire (you might need to decode JWT)\",\n+                    \"    // If token is close to expiration, refresh it\",\n+                    \"    // This is pseudo-code - you would need actual token expiry check\",\n+                    \"    /*\",\n+                    \"    if (tokenIsExpiring) {\",\n+                    \"        pm.sendRequest({\",\n+                    \"            url: pm.collectionVariables.get(\\\"baseUrl\\\") + \\\"/auth/refresh-token\\\",\",\n+                    \"            method: \\\"POST\\\",\",\n+                    \"            header: {\",\n+                    \"                \\\"Content-Type\\\": \\\"application/json\\\",\",\n+                    \"                \\\"Authorization\\\": \\\"Bearer \\\" + pm.collectionVariables.get(\\\"authToken\\\")\",\n+                    \"            }\",\n+                    \"        }, function (err, res) {\",\n+                    \"            if (!err && res.code === 200) {\",\n+                    \"                var responseJson = res.json();\",\n+                    \"                if (responseJson.token) {\",\n+                    \"                    pm.collectionVariables.set(\\\"authToken\\\", responseJson.token);\",\n+                    \"                }\",\n+                    \"            }\",\n+                    \"        });\",\n+                    \"    }\",\n+                    \"    */\",\n+                    \"}\"\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        ]\n+      },\n+      {\n+        \"name\": \"Collection Tests\",\n+        \"description\": \"Common tests that can be added to the collection tests\",\n+        \"item\": [\n+          {\n+            \"name\": \"Response Time Test\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}\",\n+              \"header\": []\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"// This can be added to the collection tests\",\n+                    \"pm.test(\\\"Response time is acceptable\\\", function () {\",\n+                    \"    pm.expect(pm.response.responseTime).to.be.below(1000);\",\n+                    \"});\",\n+                    \"\",\n+                    \"// Check if response is valid JSON\",\n+                    \"pm.test(\\\"Response is valid JSON\\\", function() {\",\n+                    \"    if (pm.response.headers.get(\\\"Content-Type\\\") && \",\n+                    \"        pm.response.headers.get(\\\"Content-Type\\\").includes(\\\"application/json\\\")) {\",\n+                    \"        try {\",\n+                    \"            pm.response.json();\",\n+                    \"            pm.expect(true).to.be.true;\",\n+                    \"        } catch (e) {\",\n+                    \"            pm.expect(false).to.be.true;\",\n+                    \"        }\",\n+                    \"    }\",\n+                    \"});\"\n+                  ]\n+                }\n+              }\n+            ]\n+          },\n+          {\n+            \"name\": \"Error Response Structure Test\",\n+            \"request\": {\n+              \"method\": \"GET\",\n+              \"url\": \"{{baseUrl}}\",\n+              \"header\": []\n+            },\n+            \"event\": [\n+              {\n+                \"listen\": \"test\",\n+                \"script\": {\n+                  \"type\": \"text/javascript\",\n+                  \"exec\": [\n+                    \"// This can be added to the collection tests to verify error response structure\",\n+                    \"if (pm.response.code >= 400) {\",\n+                    \"    pm.test(\\\"Error response has the correct structure\\\", function () {\",\n+                    \"        var jsonData = pm.response.json();\",\n+                    \"        pm.expect(jsonData.message).to.exist;\",\n+                    \"    });\",\n+                    \"}\"\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        ]\n+      }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741726035733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1368,5 +1368,11 @@\n                 ]\n             }\n             ]\n         }\n-    \n\\ No newline at end of file\n+    ]\n+}\n+]\n+}\n+]\n+}\n+]\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741725014430,
            "name": "Commit-0",
            "content": "{\n    \"info\": {\n      \"name\": \"Author Dashboard API\",\n      \"description\": \"Collection for testing the Author Dashboard API endpoints\",\n      \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"variable\": [\n      {\n        \"key\": \"baseUrl\",\n        \"value\": \"http://localhost:3000/api\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"authToken\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"adminToken\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"userId\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"bookId\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"orderId\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"royaltyId\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"item\": [\n      {\n        \"name\": \"Authentication\",\n        \"description\": \"Authentication related endpoints\",\n        \"item\": [\n          {\n            \"name\": \"Register\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/auth/register\",\n              \"header\": [\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"name\\\": \\\"Test Author\\\",\\n  \\\"email\\\": \\\"author@example.com\\\",\\n  \\\"password\\\": \\\"password123\\\",\\n  \\\"phoneNumber\\\": \\\"+911234567890\\\"\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 201\\\", function () {\",\n                    \"    pm.response.to.have.status(201);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Response has token\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.token).to.exist;\",\n                    \"    pm.environment.set(\\\"authToken\\\", jsonData.token);\",\n                    \"    pm.collectionVariables.set(\\\"authToken\\\", jsonData.token);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"User data is returned\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.user).to.exist;\",\n                    \"    pm.expect(jsonData.user.name).to.eql(\\\"Test Author\\\");\",\n                    \"    pm.expect(jsonData.user.email).to.eql(\\\"author@example.com\\\");\",\n                    \"    pm.expect(jsonData.user.password).to.not.exist;\",\n                    \"    \",\n                    \"    if (jsonData.user._id) {\",\n                    \"        pm.environment.set(\\\"userId\\\", jsonData.user._id);\",\n                    \"        pm.collectionVariables.set(\\\"userId\\\", jsonData.user._id);\",\n                    \"    }\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Login\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/auth/login\",\n              \"header\": [\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"email\\\": \\\"author@example.com\\\",\\n  \\\"password\\\": \\\"password123\\\"\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Login successful\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.user.email).to.eql(\\\"author@example.com\\\");\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Response has token\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.token).to.exist;\",\n                    \"    pm.environment.set(\\\"authToken\\\", jsonData.token);\",\n                    \"    pm.collectionVariables.set(\\\"authToken\\\", jsonData.token);\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Get Profile\",\n            \"request\": {\n              \"method\": \"GET\",\n              \"url\": \"{{baseUrl}}/auth/profile\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ]\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Profile data is valid\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.name).to.exist;\",\n                    \"    pm.expect(jsonData.email).to.exist;\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Update Profile\",\n            \"request\": {\n              \"method\": \"PUT\",\n              \"url\": \"{{baseUrl}}/auth/profile\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                },\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"name\\\": \\\"Updated Author Name\\\",\\n  \\\"phoneNumber\\\": \\\"+911234567890\\\",\\n  \\\"about\\\": \\\"I am an author who writes fiction books.\\\",\\n  \\\"address\\\": {\\n    \\\"street\\\": \\\"123 Author Lane\\\",\\n    \\\"city\\\": \\\"Booktown\\\",\\n    \\\"state\\\": \\\"Reading\\\",\\n    \\\"country\\\": \\\"India\\\",\\n    \\\"zipCode\\\": \\\"110001\\\"\\n  },\\n  \\\"bankAccount\\\": {\\n    \\\"accountNumber\\\": \\\"1234567890\\\",\\n    \\\"ifscCode\\\": \\\"ABCD0001234\\\",\\n    \\\"bankName\\\": \\\"Book Bank\\\"\\n  }\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Profile updated successfully\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.message).to.eql(\\\"Profile updated successfully\\\");\",\n                    \"    pm.expect(jsonData.user.name).to.eql(\\\"Updated Author Name\\\");\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Forgot Password\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/auth/forgot-password\",\n              \"header\": [\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"email\\\": \\\"author@example.com\\\"\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Password reset instructions sent\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.message).to.include(\\\"Password reset instructions sent\\\");\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"name\": \"Books\",\n        \"description\": \"Book management endpoints\",\n        \"item\": [\n          {\n            \"name\": \"Create Book\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/books\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                },\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"title\\\": \\\"The Great Novel\\\",\\n  \\\"price\\\": 499,\\n  \\\"authorCopyPrice\\\": 299,\\n  \\\"stock\\\": 100,\\n  \\\"category\\\": \\\"Fiction\\\",\\n  \\\"isbn\\\": \\\"978-3-16-148410-0\\\",\\n  \\\"publication\\\": {\\n    \\\"publicationId\\\": \\\"PUBL001\\\",\\n    \\\"publishedDate\\\": \\\"2023-01-15\\\",\\n    \\\"description\\\": \\\"A great story about adventure and mystery.\\\"\\n  },\\n  \\\"coverType\\\": \\\"Paperback\\\",\\n  \\\"pageSize\\\": \\\"A5\\\",\\n  \\\"interiorColor\\\": \\\"Black & White\\\",\\n  \\\"language\\\": \\\"English\\\"\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 201\\\", function () {\",\n                    \"    pm.response.to.have.status(201);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Book created successfully\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.message).to.eql(\\\"Book created successfully\\\");\",\n                    \"    pm.expect(jsonData.book).to.exist;\",\n                    \"    pm.expect(jsonData.book.title).to.eql(\\\"The Great Novel\\\");\",\n                    \"    \",\n                    \"    if (jsonData.book._id) {\",\n                    \"        pm.environment.set(\\\"bookId\\\", jsonData.book._id);\",\n                    \"        pm.collectionVariables.set(\\\"bookId\\\", jsonData.book._id);\",\n                    \"    }\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Get All Books\",\n            \"request\": {\n              \"method\": \"GET\",\n              \"url\": \"{{baseUrl}}/books\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ],\n              \"query\": [\n                {\n                  \"key\": \"page\",\n                  \"value\": \"1\"\n                },\n                {\n                  \"key\": \"limit\",\n                  \"value\": \"10\"\n                },\n                {\n                  \"key\": \"category\",\n                  \"value\": \"Fiction\",\n                  \"disabled\": true\n                },\n                {\n                  \"key\": \"search\",\n                  \"value\": \"novel\",\n                  \"disabled\": true\n                }\n              ]\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Response contains books array\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.books).to.exist.and.to.be.an('array');\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Get Book by ID\",\n            \"request\": {\n              \"method\": \"GET\",\n              \"url\": \"{{baseUrl}}/books/{{bookId}}\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ]\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Book details are correct\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData._id).to.eql(pm.collectionVariables.get(\\\"bookId\\\"));\",\n                    \"    pm.expect(jsonData.title).to.exist;\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Update Book\",\n            \"request\": {\n              \"method\": \"PUT\",\n              \"url\": \"{{baseUrl}}/books/{{bookId}}\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                },\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"title\\\": \\\"The Great Novel - Updated\\\",\\n  \\\"price\\\": 599,\\n  \\\"stock\\\": 150,\\n  \\\"marketplaceLinks\\\": {\\n    \\\"amazon\\\": \\\"https://amazon.com/book/123\\\",\\n    \\\"flipkart\\\": \\\"https://flipkart.com/book/123\\\"\\n  }\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Book updated successfully\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.message).to.eql(\\\"Book updated successfully\\\");\",\n                    \"    pm.expect(jsonData.book.title).to.eql(\\\"The Great Novel - Updated\\\");\",\n                    \"    pm.expect(jsonData.book.price).to.eql(599);\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Update Author Price\",\n            \"request\": {\n              \"method\": \"PUT\",\n              \"url\": \"{{baseUrl}}/books/{{bookId}}/author-price\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                },\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"price\\\": 350\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Author price updated\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.message).to.include(\\\"Author price updated\\\");\",\n                    \"    pm.expect(jsonData.book.authorCopyPrice).to.eql(350);\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Get Dashboard Stats\",\n            \"request\": {\n              \"method\": \"GET\",\n              \"url\": \"{{baseUrl}}/books/dashboard\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ]\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Dashboard stats exist\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.totalRoyaltyEarned).to.exist;\",\n                    \"    pm.expect(jsonData.books).to.exist.and.to.be.an('array');\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Upload Cover Image\",\n            \"request\": {\n              \"method\": \"PUT\",\n              \"url\": \"{{baseUrl}}/books/{{bookId}}/cover\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"formdata\",\n                \"formdata\": [\n                  {\n                    \"key\": \"coverImage\",\n                    \"type\": \"file\",\n                    \"src\": \"/path/to/image.jpg\"\n                  }\n                ]\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"\",\n                    \"pm.test(\\\"Cover image updated\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.message).to.include(\\\"Cover image updated\\\");\",\n                    \"    pm.expect(jsonData.coverImage).to.exist;\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Delete Book\",\n            \"request\": {\n              \"method\": \"DELETE\",\n              \"url\": \"{{baseUrl}}/(Due to technical issues, the search service is temporarily unavailable.)\n  \n  Here's the complete Postman collection script with all endpoints and fixes:\n  \n  ```json\n  {\n    \"info\": {\n      \"name\": \"Author Dashboard API\",\n      \"description\": \"Collection for testing the Author Dashboard API endpoints\",\n      \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"variable\": [\n      {\n        \"key\": \"baseUrl\",\n        \"value\": \"http://localhost:3000/api\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"authToken\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"adminToken\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"userId\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"bookId\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"orderId\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      },\n      {\n        \"key\": \"royaltyId\",\n        \"value\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"item\": [\n      {\n        \"name\": \"Authentication\",\n        \"item\": [\n          {\n            \"name\": \"Register\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/auth/register\",\n              \"header\": [\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"name\\\": \\\"Test Author\\\",\\n  \\\"email\\\": \\\"author@example.com\\\",\\n  \\\"password\\\": \\\"password123\\\",\\n  \\\"phoneNumber\\\": \\\"+911234567890\\\"\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 201\\\", function () {\",\n                    \"    pm.response.to.have.status(201);\",\n                    \"});\",\n                    \"pm.test(\\\"Response has token\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.token).to.exist;\",\n                    \"    pm.collectionVariables.set(\\\"authToken\\\", jsonData.token);\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Login\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/auth/login\",\n              \"header\": [\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"email\\\": \\\"author@example.com\\\",\\n  \\\"password\\\": \\\"password123\\\"\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"pm.test(\\\"Login successful\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.token).to.exist;\",\n                    \"    pm.collectionVariables.set(\\\"authToken\\\", jsonData.token);\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"name\": \"Admin\",\n        \"item\": [\n          {\n            \"name\": \"Get All Users\",\n            \"request\": {\n              \"method\": \"GET\",\n              \"url\": \"{{baseUrl}}/admin/users\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{adminToken}}\"\n                }\n              ]\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"pm.test(\\\"Users list received\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData).to.be.an('array');\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Update User Revenue\",\n            \"request\": {\n              \"method\": \"PUT\",\n              \"url\": \"{{baseUrl}}/admin/users/{{userId}}/revenue\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{adminToken}}\"\n                },\n                {\n                  \"key\": \"Content-Type\",\n                  \"value\": \"application/json\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"monthly\\\": 15000,\\n  \\\"yearly\\\": 180000\\n}\"\n              }\n            },\n            \"event\": [\n              {\n                \"listen\": \"test\",\n                \"script\": {\n                  \"type\": \"text/javascript\",\n                  \"exec\": [\n                    \"pm.test(\\\"Status code is 200\\\", function () {\",\n                    \"    pm.response.to.have.status(200);\",\n                    \"});\",\n                    \"pm.test(\\\"Revenue updated\\\", function () {\",\n                    \"    var jsonData = pm.response.json();\",\n                    \"    pm.expect(jsonData.revenue.monthly).to.eql(15000);\",\n                    \"    pm.expect(jsonData.revenue.yearly).to.eql(180000);\",\n                    \"});\"\n                  ]\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Manage KYC\",\n            \"item\": [\n              {\n                \"name\": \"Get Pending KYCs\",\n                \"request\": {\n                  \"method\": \"GET\",\n                  \"url\": \"{{baseUrl}}/admin/kyc\",\n                  \"header\": [\n                    {\n                      \"key\": \"Authorization\",\n                      \"value\": \"Bearer {{adminToken}}\"\n                    }\n                  ]\n                }\n              },\n              {\n                \"name\": \"Approve KYC\",\n                \"request\": {\n                  \"method\": \"POST\",\n                  \"url\": \"{{baseUrl}}/admin/kyc/approve/{{userId}}\",\n                  \"header\": [\n                    {\n                      \"key\": \"Authorization\",\n                      \"value\": \"Bearer {{adminToken}}\"\n                    }\n                  ],\n                  \"body\": {\n                    \"mode\": \"raw\",\n                    \"raw\": \"{\\n  \\\"status\\\": \\\"approved\\\"\\n}\"\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"Royalty Management\",\n            \"item\": [\n              {\n                \"name\": \"Approve Payout\",\n                \"request\": {\n                  \"method\": \"POST\",\n                  \"url\": \"{{baseUrl}}/admin/royalties/{{royaltyId}}/approve\",\n                  \"header\": [\n                    {\n                      \"key\": \"Authorization\",\n                      \"value\": \"Bearer {{adminToken}}\"\n                    }\n                  ]\n                }\n              },\n              {\n                \"name\": \"Reject Payout\",\n                \"request\": {\n                  \"method\": \"POST\",\n                  \"url\": \"{{baseUrl}}/admin/royalties/{{royaltyId}}/reject\",\n                  \"header\": [\n                    {\n                      \"key\": \"Authorization\",\n                      \"value\": \"Bearer {{adminToken}}\"\n                    }\n                  ],\n                  \"body\": {\n                    \"mode\": \"raw\",\n                    \"raw\": \"{\\n  \\\"rejectionReason\\\": \\\"Insufficient documentation\\\"\\n}\"\n                  }\n                }\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"name\": \"Books\",\n        \"item\": [\n          {\n            \"name\": \"Create Book\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/books\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"title\\\": \\\"Sample Book\\\",\\n  \\\"price\\\": 299\\n}\"\n              }\n            }\n          },\n          {\n            \"name\": \"Update Book\",\n            \"request\": {\n              \"method\": \"PUT\",\n              \"url\": \"{{baseUrl}}/books/{{bookId}}\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"price\\\": 399\\n}\"\n              }\n            }\n          }\n        ]\n      },\n      {\n        \"name\": \"Orders\",\n        \"item\": [\n          {\n            \"name\": \"Create Order\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/orders\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"bookId\\\": \\\"{{bookId}}\\\",\\n  \\\"quantity\\\": 2\\n}\"\n              }\n            }\n          }\n        ]\n      },\n      {\n        \"name\": \"Royalties\",\n        \"item\": [\n          {\n            \"name\": \"Request Payout\",\n            \"request\": {\n              \"method\": \"POST\",\n              \"url\": \"{{baseUrl}}/royalties/request\",\n              \"header\": [\n                {\n                  \"key\": \"Authorization\",\n                  \"value\": \"Bearer {{authToken}}\"\n                }\n              ],\n              \"body\": {\n                \"mode\": \"raw\",\n                \"raw\": \"{\\n  \\\"amount\\\": 1000\\n}\"\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }"
        }
    ]
}
{
    "sourceFile": "src/middleware/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1741462278980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741463348761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n const jwt = require('jsonwebtoken');\n const User = require('../models/User');\n-const rateLimit = require('express-rate-limit');\n \n const auth = async (req, res, next) => {\n   try {\n     const token = req.header('Authorization')?.replace('Bearer ', '');\n@@ -35,14 +34,8 @@\n     next();\n   };\n };\n \n-const limiter = rateLimit({\n-  windowMs: 15 * 60 * 1000, // 15 minutes\n-  max: 5 // limit each IP to 5 requests per windowMs\n-});\n-\n module.exports = {\n   auth,\n-  authorizeRole,\n-  limiter\n+  authorizeRole\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741466991598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n       return res.status(401).json({ message: 'User not found' });\n     }\n \n     req.user = user;\n-    req.token = token;\n     next();\n   } catch (error) {\n     res.status(401).json({ message: 'Invalid authentication token' });\n   }\n"
                },
                {
                    "date": 1741665207157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,13 @@\n \n     req.user = user;\n     next();\n   } catch (error) {\n-    res.status(401).json({ message: 'Invalid authentication token' });\n+    console.error('Auth Middleware Error:', error);\n+    const message = error.name === 'TokenExpiredError' \n+      ? 'Session expired, please login again'\n+      : 'Invalid authentication token';\n+    res.status(401).json({ message });\n   }\n };\n \n const authorizeRole = (roles) => {\n"
                },
                {
                    "date": 1741665543959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,9 @@\n \n     req.user = user;\n     next();\n   } catch (error) {\n-    console.error('Auth Middleware Error:', error);\n-    const message = error.name === 'TokenExpiredError' \n-      ? 'Session expired, please login again'\n-      : 'Invalid authentication token';\n-    res.status(401).json({ message });\n+    res.status(401).json({ message: 'Invalid authentication token' });\n   }\n };\n \n const authorizeRole = (roles) => {\n"
                }
            ],
            "date": 1741462278980,
            "name": "Commit-0",
            "content": "const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\nconst rateLimit = require('express-rate-limit');\n\nconst auth = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n\n    if (!user) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n\n    req.user = user;\n    req.token = token;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: 'Invalid authentication token' });\n  }\n};\n\nconst authorizeRole = (roles) => {\n  return (req, res, next) => {\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ \n        message: 'Access denied: insufficient permissions' \n      });\n    }\n    next();\n  };\n};\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5 // limit each IP to 5 requests per windowMs\n});\n\nmodule.exports = {\n  auth,\n  authorizeRole,\n  limiter\n};"
        }
    ]
}
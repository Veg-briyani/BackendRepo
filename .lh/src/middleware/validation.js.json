{
    "sourceFile": "src/middleware/validation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1741454162399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741454178692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,18 +100,13 @@\n \n const validateProfileUpdate = (req, res, next) => {\n   const schema = Joi.object({\n     name: Joi.string().min(2).max(50),\n-    phoneNumber: Joi.string().pattern(/^\\+?[1-9]\\d{1,14}$/),\n-    address: Joi.object({\n-      street: Joi.string(),\n-      city: Joi.string(),\n-      state: Joi.string(),\n-      country: Joi.string(),\n-      zipCode: Joi.string()\n+    profile: Joi.object({\n+      title: Joi.string(),\n+      location: Joi.string(),\n+      bio: Joi.string()\n     }),\n-    about: Joi.string().max(1000),\n-    profilePhoto: Joi.string(),\n     authorStats: Joi.object({\n       numberOfPublications: Joi.number().min(0),\n       averageRating: Joi.number().min(0).max(5),\n       numberOfFollowers: Joi.number().min(0),\n"
                },
                {
                    "date": 1741454198685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,17 @@\n \n const validateProfileUpdate = (req, res, next) => {\n   const schema = Joi.object({\n     name: Joi.string().min(2).max(50),\n+    phoneNumber: Joi.string().pattern(/^\\+?[1-9]\\d{1,14}$/).message('Invalid phone number format'),\n+    address: Joi.object({\n+      street: Joi.string(),\n+      city: Joi.string(),\n+      state: Joi.string(),\n+      country: Joi.string(),\n+      zipCode: Joi.string()\n+    }),\n+    about: Joi.string().max(1000),\n     profile: Joi.object({\n       title: Joi.string(),\n       location: Joi.string(),\n       bio: Joi.string()\n@@ -110,9 +119,9 @@\n       numberOfPublications: Joi.number().min(0),\n       averageRating: Joi.number().min(0).max(5),\n       numberOfFollowers: Joi.number().min(0),\n       totalWorks: Joi.number().min(0)\n-    })\n+    }).optional()\n   });\n \n   const { error } = schema.validate(req.body);\n   if (error) {\n"
                },
                {
                    "date": 1741460356490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,11 @@\n       accountNumber: Joi.string(),\n       ifscCode: Joi.string(),\n       bankName: Joi.string(),\n       accountHolderName: Joi.string()\n-    })\n+    }),\n+    aadhaarNumber: Joi.string().length(12).pattern(/^\\d+$/).required(),\n+    panNumber: Joi.string().length(10).pattern(/^[A-Z]{5}\\d{4}[A-Z]$/).required()\n   });\n \n   const { error } = schema.validate(req.body);\n   if (error) {\n@@ -181,9 +183,11 @@\n       ifscCode: Joi.string(),\n       bankName: Joi.string(),\n       accountHolderName: Joi.string()\n     }),\n-    kycStatus: Joi.string().valid('pending', 'approved', 'rejected')\n+    kycStatus: Joi.string().valid('pending', 'approved', 'rejected'),\n+    aadhaarNumber: Joi.string().length(12).pattern(/^\\d+$/),\n+    panNumber: Joi.string().length(10).pattern(/^[A-Z]{5}\\d{4}[A-Z]$/)\n   });\n \n   const { error } = schema.validate(req.body);\n   if (error) {\n"
                },
                {
                    "date": 1741460470440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,12 @@\n       country: Joi.string(),\n       zipCode: Joi.string()\n     }),\n     bankAccount: Joi.object({\n-      accountNumber: Joi.string(),\n-      ifscCode: Joi.string(),\n-      bankName: Joi.string(),\n-      accountHolderName: Joi.string()\n-    }),\n+      accountNumber: Joi.string().required(),\n+      ifscCode: Joi.string().required(),\n+      bankName: Joi.string().required()\n+    }).required(),\n     aadhaarNumber: Joi.string().length(12).pattern(/^\\d+$/).required(),\n     panNumber: Joi.string().length(10).pattern(/^[A-Z]{5}\\d{4}[A-Z]$/).required()\n   });\n \n@@ -178,12 +177,11 @@\n     }),\n     badges: Joi.array().items(Joi.string()),\n     achievements: Joi.array().items(Joi.string()),\n     bankAccount: Joi.object({\n-      accountNumber: Joi.string(),\n-      ifscCode: Joi.string(),\n-      bankName: Joi.string(),\n-      accountHolderName: Joi.string()\n+      accountNumber: Joi.string().required(),\n+      ifscCode: Joi.string().required(),\n+      bankName: Joi.string().required()\n     }),\n     kycStatus: Joi.string().valid('pending', 'approved', 'rejected'),\n     aadhaarNumber: Joi.string().length(12).pattern(/^\\d+$/),\n     panNumber: Joi.string().length(10).pattern(/^[A-Z]{5}\\d{4}[A-Z]$/)\n"
                },
                {
                    "date": 1741460581346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,14 +18,14 @@\n       country: Joi.string(),\n       zipCode: Joi.string()\n     }),\n     bankAccount: Joi.object({\n-      accountNumber: Joi.string().required(),\n-      ifscCode: Joi.string().required(),\n-      bankName: Joi.string().required()\n-    }).required(),\n-    aadhaarNumber: Joi.string().length(12).pattern(/^\\d+$/).required(),\n-    panNumber: Joi.string().length(10).pattern(/^[A-Z]{5}\\d{4}[A-Z]$/).required()\n+      accountNumber: Joi.string(),\n+      ifscCode: Joi.string(),\n+      bankName: Joi.string()\n+    }).optional(),\n+    aadhaarNumber: Joi.string().length(12).pattern(/^\\d+$/).optional(),\n+    panNumber: Joi.string().length(10).pattern(/^[A-Z]{5}\\d{4}[A-Z]$/).optional()\n   });\n \n   const { error } = schema.validate(req.body);\n   if (error) {\n"
                },
                {
                    "date": 1741465831834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,8 +229,21 @@\n   if (error) return res.status(400).json({ message: error.details[0].message });\n   next();\n };\n \n+const validateOrder = (req, res, next) => {\n+  const schema = Joi.object({\n+    bookId: Joi.string().required(),\n+    quantity: Joi.number().min(1).required(),\n+    paymentMethod: Joi.string().valid('wallet', 'razorpay').required(),\n+    isAuthorCopy: Joi.boolean().optional()\n+  });\n+\n+  const { error } = schema.validate(req.body);\n+  if (error) return res.status(400).json({ message: error.details[0].message });\n+  next();\n+};\n+\n module.exports = {\n   validateUser,\n   validateBook,\n   validateLogin,\n@@ -240,6 +253,7 @@\n   validateDashboardData,\n   validateAdminUserUpdate,\n   validateGoogleLogin,\n   validatePrintLog,\n-  validatePayoutRequest\n+  validatePayoutRequest,\n+  validateOrder\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741466665097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,8 +242,18 @@\n   if (error) return res.status(400).json({ message: error.details[0].message });\n   next();\n };\n \n+const validateAuthorPrice = (req, res, next) => {\n+  const schema = Joi.object({\n+    price: Joi.number().min(0).required()\n+  });\n+\n+  const { error } = schema.validate(req.body);\n+  if (error) return res.status(400).json({ message: error.details[0].message });\n+  next();\n+};\n+\n module.exports = {\n   validateUser,\n   validateBook,\n   validateLogin,\n@@ -254,6 +264,7 @@\n   validateAdminUserUpdate,\n   validateGoogleLogin,\n   validatePrintLog,\n   validatePayoutRequest,\n-  validateOrder\n+  validateOrder,\n+  validateAuthorPrice\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741724138790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,8 +252,31 @@\n   if (error) return res.status(400).json({ message: error.details[0].message });\n   next();\n };\n \n+const validateUserRevenue = (req, res, next) => {\n+  const schema = Joi.object({\n+    monthlyRevenue: Joi.array().items(\n+      Joi.number().min(0)\n+    ),\n+    yearlyPerformance: Joi.array().items(\n+      Joi.object({\n+        year: Joi.number().required(),\n+        monthlyRevenue: Joi.array().items(\n+          Joi.object({\n+            month: Joi.number().min(1).max(12).required(),\n+            revenue: Joi.number().min(0).required()\n+          })\n+        )\n+      })\n+    )\n+  });\n+\n+  const { error } = schema.validate(req.body);\n+  if (error) return res.status(400).json({ message: error.details[0].message });\n+  next();\n+};\n+\n module.exports = {\n   validateUser,\n   validateBook,\n   validateLogin,\n@@ -265,6 +288,7 @@\n   validateGoogleLogin,\n   validatePrintLog,\n   validatePayoutRequest,\n   validateOrder,\n-  validateAuthorPrice\n+  validateAuthorPrice,\n+  validateUserRevenue\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741454162399,
            "name": "Commit-0",
            "content": "const Joi = require('joi');\n\nconst validateUser = (req, res, next) => {\n  const schema = Joi.object({\n    name: Joi.string().required().min(2).max(50),\n    email: Joi.string().required().email(),\n    password: Joi.string().required().min(6),\n    phoneNumber: Joi.string().pattern(/^\\+?[1-9]\\d{1,14}$/).message('Invalid phone number format'),\n    role: Joi.string().valid('author', 'admin'),\n    profile: Joi.object({\n      title: Joi.string(),\n      location: Joi.string()\n    }),\n    address: Joi.object({\n      street: Joi.string(),\n      city: Joi.string(),\n      state: Joi.string(),\n      country: Joi.string(),\n      zipCode: Joi.string()\n    }),\n    bankAccount: Joi.object({\n      accountNumber: Joi.string(),\n      ifscCode: Joi.string(),\n      bankName: Joi.string(),\n      accountHolderName: Joi.string()\n    })\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).json({ message: error.details[0].message });\n  }\n  next();\n};\n\nconst validateBook = (req, res, next) => {\n  const schema = Joi.object({\n    title: Joi.string().required().min(1).max(200),\n    price: Joi.number().required().min(0),\n    stock: Joi.number().required().min(0),\n    category: Joi.string().required(),\n    coverImage: Joi.string().optional(),\n    isbn: Joi.string().required().pattern(/^(?=(?:\\D*\\d){10}(?:(?:\\D*\\d){3})?$)[\\d-]+$/),\n    marketplaceLinks: Joi.object({\n      amazon: Joi.string().uri(),\n      flipkart: Joi.string().uri()\n    }),\n    publication: Joi.object({\n      publicationId: Joi.string().required(),\n      rating: Joi.number().min(0).max(5),\n      publishedDate: Joi.date().required(),\n      description: Joi.string().required()\n    }).required()\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).json({ message: error.details[0].message });\n  }\n  next();\n};\n\nconst validateLogin = (req, res, next) => {\n  const schema = Joi.object({\n    email: Joi.string().email().required(),\n    password: Joi.string().required()\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).json({ message: error.details[0].message });\n  }\n  next();\n};\n\nconst validateForgotPassword = (req, res, next) => {\n  const schema = Joi.object({\n    email: Joi.string().required().email()\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).json({ message: error.details[0].message });\n  }\n  next();\n};\n\nconst validateResetPassword = (req, res, next) => {\n  const schema = Joi.object({\n    token: Joi.string().required(),\n    newPassword: Joi.string().required().min(6)\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).json({ message: error.details[0].message });\n  }\n  next();\n};\n\nconst validateProfileUpdate = (req, res, next) => {\n  const schema = Joi.object({\n    name: Joi.string().min(2).max(50),\n    phoneNumber: Joi.string().pattern(/^\\+?[1-9]\\d{1,14}$/),\n    address: Joi.object({\n      street: Joi.string(),\n      city: Joi.string(),\n      state: Joi.string(),\n      country: Joi.string(),\n      zipCode: Joi.string()\n    }),\n    about: Joi.string().max(1000),\n    profilePhoto: Joi.string(),\n    authorStats: Joi.object({\n      numberOfPublications: Joi.number().min(0),\n      averageRating: Joi.number().min(0).max(5),\n      numberOfFollowers: Joi.number().min(0),\n      totalWorks: Joi.number().min(0)\n    })\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).json({ message: error.details[0].message });\n  }\n  next();\n};\n\nconst validateDashboardData = (req, res, next) => {\n  const schema = Joi.object({\n    totalRoyaltyEarned: Joi.number().min(0),\n    outstandingRoyalty: Joi.number().min(0),\n    copiesSold: Joi.number().min(0),\n    royaltyReceived: Joi.number().min(0),\n    currentMonthGrowth: Joi.number(),\n    genres: Joi.array().items(Joi.string()),\n    totalInventory: Joi.number().min(0),\n    books: Joi.array().items(\n      Joi.object({\n        name: Joi.string().required(),\n        price: Joi.number().min(0).required(),\n        stock: Joi.number().min(0).required(),\n        royalty: Joi.number().min(0).required(),\n        copiesSold: Joi.number().min(0).required(),\n        lastMonthSale: Joi.number().required()\n      })\n    )\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).json({ message: error.details[0].message });\n  }\n  next();\n};\n\nconst validateAdminUserUpdate = (req, res, next) => {\n  const schema = Joi.object({\n    name: Joi.string().min(2).max(50),\n    email: Joi.string().email(),\n    role: Joi.string().valid('author', 'admin'),\n    profile: Joi.object({\n      title: Joi.string(),\n      location: Joi.string(),\n      bio: Joi.string()\n    }),\n    authorStats: Joi.object({\n      numberOfPublications: Joi.number().min(0),\n      averageRating: Joi.number().min(0).max(5),\n      numberOfFollowers: Joi.number().min(0),\n      totalWorks: Joi.number().min(0)\n    }),\n    badges: Joi.array().items(Joi.string()),\n    achievements: Joi.array().items(Joi.string()),\n    bankAccount: Joi.object({\n      accountNumber: Joi.string(),\n      ifscCode: Joi.string(),\n      bankName: Joi.string(),\n      accountHolderName: Joi.string()\n    }),\n    kycStatus: Joi.string().valid('pending', 'approved', 'rejected')\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).json({ message: error.details[0].message });\n  }\n  next();\n};\n\nconst validateGoogleLogin = (req, res, next) => {\n  const schema = Joi.object({\n    token: Joi.string().required()\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) return res.status(400).json({ message: error.details[0].message });\n  next();\n};\n\nconst validatePrintLog = (req, res, next) => {\n  const schema = Joi.object({\n    bookId: Joi.string().required(),\n    printDate: Joi.date().required(),\n    quantity: Joi.number().min(1).required(),\n    pressName: Joi.string().required(),\n    cost: Joi.number().min(0).required(),\n    edition: Joi.string().required()\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) return res.status(400).json({ message: error.details[0].message });\n  next();\n};\n\nconst validatePayoutRequest = (req, res, next) => {\n  const schema = Joi.object({\n    amount: Joi.number().min(100).required(),\n    paymentMethod: Joi.string().valid('bank_transfer', 'upi', 'paypal').required()\n  });\n\n  const { error } = schema.validate(req.body);\n  if (error) return res.status(400).json({ message: error.details[0].message });\n  next();\n};\n\nmodule.exports = {\n  validateUser,\n  validateBook,\n  validateLogin,\n  validateForgotPassword,\n  validateResetPassword,\n  validateProfileUpdate,\n  validateDashboardData,\n  validateAdminUserUpdate,\n  validateGoogleLogin,\n  validatePrintLog,\n  validatePayoutRequest\n};"
        }
    ]
}
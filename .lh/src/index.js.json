{
    "sourceFile": "src/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1741454157117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741454178693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n }));\n app.use(express.json());\n app.use(express.urlencoded({ extended: true }));\n app.use('/book-covers', express.static('public/book-covers'));\n-app.use('/profile-photos', express.static('public/profile-photos'));\n \n // Setup Socket.IO handlers\n setupSocket(io);\n \n"
                },
                {
                    "date": 1741463386556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,19 +109,19 @@\n httpServer.listen(PORT, () => {\n   console.log(`Server running on port ${PORT}`);\n });\n \n-// Handle unhandled promise rejections\n-process.on('unhandledRejection', (err) => {\n-  console.log('UNHANDLED REJECTION! ðŸ’¥ Shutting down...');\n-  console.log(err.name, err.message);\n-  httpServer.close(() => {\n-    process.exit(1);\n-  });\n-});\n+// // Handle unhandled promise rejections\n+// process.on('unhandledRejection', (err) => {\n+//   console.log('UNHANDLED REJECTION! ðŸ’¥ Shutting down...');\n+//   console.log(err.name, err.message);\n+//   httpServer.close(() => {\n+//     process.exit(1);\n+//   });\n\\ No newline at end of file\n+// });\n \n-// Handle uncaught exceptions\n-process.on('uncaughtException', (err) => {\n-  console.log('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down...');\n-  console.log(err.name, err.message);\n-  process.exit(1);\n-});\n+// // Handle uncaught exceptions\n+// process.on('uncaughtException', (err) => {\n+//   console.log('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down...');\n+//   console.log(err.name, err.message);\n+//   process.exit(1);\n+// });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741463391904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+require('dotenv').config();\n+const express = require('express');\n+const cors = require('cors');\n+const { createServer } = require('http');\n+const { Server } = require('socket.io');\n+const connectDB = require('./config/database');\n+const setupSocket = require('./socket');\n+\n+// Import routes\n+const authRoutes = require('./routes/authRoutes');\n+const bookRoutes = require('./routes/bookRoutes');\n+const adminRoutes = require('./routes/adminRoutes');\n+const printLogRoutes = require('./routes/printLogRoutes');\n+const royaltyRoutes = require('./routes/royaltyRoutes');\n+const notificationRoutes = require('./routes/notificationRoutes');\n+const orderRoutes = require('./routes/orderRoutes');\n+\n+// Initialize express app\n+const app = express();\n+const httpServer = createServer(app);\n+\n+// Setup Socket.IO\n+const io = new Server(httpServer, {\n+  cors: {\n+    origin: process.env.CLIENT_URL || 'http://localhost:5173',\n+    methods: ['GET', 'POST'],\n+    credentials: true\n+  }\n+});\n+\n+// Connect to MongoDB\n+connectDB();\n+\n+// Middleware\n+app.use(cors({\n+  origin: 'http://localhost:5173',\n+  credentials: true\n+}));\n+app.use(express.json());\n+app.use(express.urlencoded({ extended: true }));\n+app.use('/book-covers', express.static('public/book-covers'));\n+\n+// Setup Socket.IO handlers\n+setupSocket(io);\n+\n+// Add before routes\n+app.options('*', cors({\n+  origin: 'http://localhost:5173',\n+  credentials: true\n+}));\n+\n+// Routes\n+app.use('/api/auth', authRoutes);\n+app.use('/api/books', bookRoutes);\n+app.use('/api/admin', adminRoutes);\n+app.use('/api/print-logs', printLogRoutes);\n+app.use('/api/royalties', royaltyRoutes);\n+app.use('/api/notifications', notificationRoutes);\n+app.use('/api/orders', orderRoutes);\n+\n+// Health check route - Move this BEFORE the 404 handler\n+app.get('/api/health', (req, res) => {\n+  res.status(200).json({ \n+    status: 'ok', \n+    message: 'Server is running',\n+    timestamp: new Date().toISOString(),\n+    uptime: process.uptime()\n+  });\n+});\n+\n+// 404 handler - This should come AFTER all valid routes\n+app.use((req, res) => {\n+  res.status(404).json({\n+    message: 'Route not found'\n+  });\n+});\n+\n+// Error handling middleware - Keep this last\n+app.use((err, req, res, next) => {\n+  console.error(err.stack);\n+  \n+  if (err.name === 'ValidationError') {\n+    return res.status(400).json({\n+      message: 'Validation Error',\n+      errors: Object.values(err.errors).map(e => e.message)\n+    });\n+  }\n+  \n+  if (err.name === 'JsonWebTokenError') {\n+    return res.status(401).json({\n+      message: 'Invalid authentication token'\n+    });\n+  }\n+  \n+  if (err.name === 'TokenExpiredError') {\n+    return res.status(401).json({\n+      message: 'Authentication token expired'\n+    });\n+  }\n+\n+  res.status(err.status || 500).json({\n+    message: err.message || 'Something went wrong!',\n+    error: process.env.NODE_ENV === 'development' ? err.stack : undefined\n+  });\n+});\n+\n+// Start server\n+const PORT = process.env.PORT || 5000;\n+httpServer.listen(PORT, () => {\n+  console.log(`Server running on port ${PORT}`);\n+});\n+\n+// Handle unhandled promise rejections\n+process.on('unhandledRejection', (err) => {\n+  console.log('UNHANDLED REJECTION! ðŸ’¥ Shutting down...');\n+  console.log(err.name, err.message);\n+  httpServer.close(() => {\n+    process.exit(1);\n+  });\n+});\n+\n+// Handle uncaught exceptions\n+process.on('uncaughtException', (err) => {\n+  console.log('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down...');\n+  console.log(err.name, err.message);\n+  process.exit(1);\n+});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741454157117,
            "name": "Commit-0",
            "content": "require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst { createServer } = require('http');\nconst { Server } = require('socket.io');\nconst connectDB = require('./config/database');\nconst setupSocket = require('./socket');\n\n// Import routes\nconst authRoutes = require('./routes/authRoutes');\nconst bookRoutes = require('./routes/bookRoutes');\nconst adminRoutes = require('./routes/adminRoutes');\nconst printLogRoutes = require('./routes/printLogRoutes');\nconst royaltyRoutes = require('./routes/royaltyRoutes');\nconst notificationRoutes = require('./routes/notificationRoutes');\nconst orderRoutes = require('./routes/orderRoutes');\n\n// Initialize express app\nconst app = express();\nconst httpServer = createServer(app);\n\n// Setup Socket.IO\nconst io = new Server(httpServer, {\n  cors: {\n    origin: process.env.CLIENT_URL || 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    credentials: true\n  }\n});\n\n// Connect to MongoDB\nconnectDB();\n\n// Middleware\napp.use(cors({\n  origin: 'http://localhost:5173',\n  credentials: true\n}));\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use('/book-covers', express.static('public/book-covers'));\napp.use('/profile-photos', express.static('public/profile-photos'));\n\n// Setup Socket.IO handlers\nsetupSocket(io);\n\n// Add before routes\napp.options('*', cors({\n  origin: 'http://localhost:5173',\n  credentials: true\n}));\n\n// Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/books', bookRoutes);\napp.use('/api/admin', adminRoutes);\napp.use('/api/print-logs', printLogRoutes);\napp.use('/api/royalties', royaltyRoutes);\napp.use('/api/notifications', notificationRoutes);\napp.use('/api/orders', orderRoutes);\n\n// Health check route - Move this BEFORE the 404 handler\napp.get('/api/health', (req, res) => {\n  res.status(200).json({ \n    status: 'ok', \n    message: 'Server is running',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// 404 handler - This should come AFTER all valid routes\napp.use((req, res) => {\n  res.status(404).json({\n    message: 'Route not found'\n  });\n});\n\n// Error handling middleware - Keep this last\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  \n  if (err.name === 'ValidationError') {\n    return res.status(400).json({\n      message: 'Validation Error',\n      errors: Object.values(err.errors).map(e => e.message)\n    });\n  }\n  \n  if (err.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      message: 'Invalid authentication token'\n    });\n  }\n  \n  if (err.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      message: 'Authentication token expired'\n    });\n  }\n\n  res.status(err.status || 500).json({\n    message: err.message || 'Something went wrong!',\n    error: process.env.NODE_ENV === 'development' ? err.stack : undefined\n  });\n});\n\n// Start server\nconst PORT = process.env.PORT || 5000;\nhttpServer.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (err) => {\n  console.log('UNHANDLED REJECTION! ðŸ’¥ Shutting down...');\n  console.log(err.name, err.message);\n  httpServer.close(() => {\n    process.exit(1);\n  });\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (err) => {\n  console.log('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down...');\n  console.log(err.name, err.message);\n  process.exit(1);\n});"
        }
    ]
}
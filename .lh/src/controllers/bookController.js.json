{
    "sourceFile": "src/controllers/bookController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1741462275555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741463348720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,13 +117,12 @@\n };\n \n const deleteBook = async (req, res) => {\n   try {\n-    const book = await Book.findByIdAndUpdate(\n-      req.params.id,\n-      { isDeleted: true, deletedAt: new Date() },\n-      { new: true }\n-    );\n+    const book = await Book.findOneAndDelete({\n+      _id: req.params.id,\n+      authorId: req.user._id\n+    });\n \n     if (!book) {\n       return res.status(404).json({ message: 'Book not found' });\n     }\n"
                },
                {
                    "date": 1741665213942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n       outstandingRoyalty: books.reduce((sum, book) => sum + (book.soldCopies * book.price * 0.7 - book.royalties), 0),\n       copiesSold: books.reduce((sum, book) => sum + book.soldCopies, 0),\n       royaltyReceived: books.reduce((sum, book) => sum + book.royalties, 0),\n       currentMonthGrowth: books.reduce((sum, book) => sum + book.lastMonthSale, 0),\n-      genres: [...new Set(books.map(book => book.category))],\n+      genres: [...new Set(books.map(book => book.category))] || [],\n       totalInventory: books.reduce((sum, book) => sum + book.stock, 0),\n       books: books.map(book => ({\n         name: book.title,\n         price: book.price,\n"
                },
                {
                    "date": 1741665543959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n       outstandingRoyalty: books.reduce((sum, book) => sum + (book.soldCopies * book.price * 0.7 - book.royalties), 0),\n       copiesSold: books.reduce((sum, book) => sum + book.soldCopies, 0),\n       royaltyReceived: books.reduce((sum, book) => sum + book.royalties, 0),\n       currentMonthGrowth: books.reduce((sum, book) => sum + book.lastMonthSale, 0),\n-      genres: [...new Set(books.map(book => book.category))] || [],\n+      genres: [...new Set(books.map(book => book.category))],\n       totalInventory: books.reduce((sum, book) => sum + book.stock, 0),\n       books: books.map(book => ({\n         name: book.title,\n         price: book.price,\n"
                }
            ],
            "date": 1741462275555,
            "name": "Commit-0",
            "content": "const Book = require('../models/Book');\nconst User = require('../models/User');\n\nconst createBook = async (req, res) => {\n  try {\n    const bookData = {\n      ...req.body,\n      authorId: req.user._id\n    };\n\n    const book = new Book(bookData);\n    await book.save();\n\n    // Update author's stats\n    await User.findByIdAndUpdate(req.user._id, {\n      $inc: {\n        'authorStats.numberOfPublications': 1,\n        'authorStats.totalWorks': 1\n      }\n    });\n\n    res.status(201).json({\n      message: 'Book created successfully',\n      book\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error creating book',\n      error: error.message\n    });\n  }\n};\n\nconst getBooks = async (req, res) => {\n  try {\n    const { page = 1, limit = 10, category, search } = req.query;\n    const query = { authorId: req.user._id };\n\n    if (category) {\n      query.category = category;\n    }\n\n    if (search) {\n      query.title = { $regex: search, $options: 'i' };\n    }\n\n    const books = await Book.find(query)\n      .sort({ createdAt: -1 })\n      .limit(limit * 1)\n      .skip((page - 1) * limit)\n      .exec();\n\n    const count = await Book.countDocuments(query);\n\n    res.json({\n      books,\n      totalPages: Math.ceil(count / limit),\n      currentPage: page,\n      totalBooks: count\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching books',\n      error: error.message\n    });\n  }\n};\n\nconst getBookById = async (req, res) => {\n  try {\n    const book = await Book.findOne({\n      _id: req.params.id,\n      authorId: req.user._id\n    });\n\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    res.json(book);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching book',\n      error: error.message\n    });\n  }\n};\n\nconst updateBook = async (req, res) => {\n  try {\n    const updates = req.body;\n    delete updates.authorId; // Prevent author change\n\n    const book = await Book.findOneAndUpdate(\n      {\n        _id: req.params.id,\n        authorId: req.user._id\n      },\n      { $set: updates },\n      { new: true, runValidators: true }\n    );\n\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    res.json({\n      message: 'Book updated successfully',\n      book\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error updating book',\n      error: error.message\n    });\n  }\n};\n\nconst deleteBook = async (req, res) => {\n  try {\n    const book = await Book.findByIdAndUpdate(\n      req.params.id,\n      { isDeleted: true, deletedAt: new Date() },\n      { new: true }\n    );\n\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    // Update author's stats\n    await User.findByIdAndUpdate(req.user._id, {\n      $inc: {\n        'authorStats.numberOfPublications': -1,\n        'authorStats.totalWorks': -1\n      }\n    });\n\n    res.json({\n      message: 'Book deleted successfully',\n      book\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error deleting book',\n      error: error.message\n    });\n  }\n};\n\nconst getDashboardStats = async (req, res) => {\n  try {\n    const books = await Book.find({ authorId: req.user._id });\n    \n    const stats = {\n      totalRoyaltyEarned: books.reduce((sum, book) => sum + book.royalties, 0),\n      outstandingRoyalty: books.reduce((sum, book) => sum + (book.soldCopies * book.price * 0.7 - book.royalties), 0),\n      copiesSold: books.reduce((sum, book) => sum + book.soldCopies, 0),\n      royaltyReceived: books.reduce((sum, book) => sum + book.royalties, 0),\n      currentMonthGrowth: books.reduce((sum, book) => sum + book.lastMonthSale, 0),\n      genres: [...new Set(books.map(book => book.category))],\n      totalInventory: books.reduce((sum, book) => sum + book.stock, 0),\n      books: books.map(book => ({\n        name: book.title,\n        price: book.price,\n        stock: book.stock,\n        royalty: book.royalties,\n        copiesSold: book.soldCopies,\n        lastMonthSale: book.lastMonthSale\n      }))\n    };\n\n    res.json(stats);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching dashboard stats',\n      error: error.message\n    });\n  }\n};\n\nconst uploadCoverImage = async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ message: 'No image uploaded' });\n    }\n\n    const book = await Book.findByIdAndUpdate(\n      req.params.id,\n      { coverImage: req.file.filename },\n      { new: true }\n    );\n\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    res.json({\n      message: 'Cover image updated successfully',\n      coverImage: `${process.env.BASE_URL}/book-covers/${req.file.filename}`\n    });\n  } catch (error) {\n    res.status(500).json({ \n      message: 'Error uploading cover image',\n      error: error.message \n    });\n  }\n};\n\nmodule.exports = {\n  createBook,\n  getBooks,\n  getBookById,\n  updateBook,\n  deleteBook,\n  getDashboardStats,\n  uploadCoverImage\n};"
        }
    ]
}
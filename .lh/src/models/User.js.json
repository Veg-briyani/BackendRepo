{
    "sourceFile": "src/models/User.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1741460352484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741460581097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,24 +78,21 @@\n     default: 'pending'\n   },\n   aadhaarNumber: {\n     type: String,\n-    required: [true, 'Aadhaar number is required for KYC'],\n     match: [/^\\d{12}$/, 'Invalid Aadhaar number format'],\n     select: false\n   },\n   panNumber: {\n     type: String,\n-    required: [true, 'PAN number is required for KYC'],\n     match: [/^[A-Z]{5}\\d{4}[A-Z]$/, 'Invalid PAN number format'],\n     uppercase: true,\n     select: false\n   },\n   bankAccount: {\n     accountNumber: String,\n     ifscCode: String,\n-    bankName: String,\n-    accountHolderName: String\n+    bankName: String\n   },\n   about: String,\n   profilePhoto: String,\n   governmentId: {\n"
                },
                {
                    "date": 1741721367735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const mongoose = require('mongoose');\n const bcrypt = require('bcrypt');\n+const jwt = require('jsonwebtoken');\n \n const userSchema = new mongoose.Schema({\n   name: {\n     type: String,\n@@ -22,32 +23,69 @@\n     type: String,\n     enum: ['author', 'admin'],\n     default: 'author'\n   },\n-  badges: [{\n-    type: String\n-  }],\n+  // Financial Section\n+  walletBalance: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  },\n+  outstandingRoyalty: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  },\n+  royaltyReceived: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  },\n   monthlyRevenue: [{\n     month: Date,\n-    amount: Number\n+    amount: {\n+      type: Number,\n+      default: 0\n+    }\n   }],\n+  // Authentication & Security\n+  authMethod: {\n+    type: String,\n+    enum: ['email', 'phone', 'google'],\n+    default: 'email'\n+  },\n+  tokens: [{\n+    token: {\n+      type: String,\n+      required: true\n+    }\n+  }],\n+  isActive: {\n+    type: Boolean,\n+    default: true\n+  },\n+  // Profile Information\n   profile: {\n     title: String,\n     location: String,\n     memberSince: {\n       type: Date,\n       default: Date.now\n     },\n-    bio: String\n+    bio: String,\n+    profilePhoto: String\n   },\n+  // Author Statistics\n   authorStats: {\n     numberOfPublications: {\n       type: Number,\n       default: 0\n     },\n     averageRating: {\n       type: Number,\n-      default: 0\n+      default: 0,\n+      min: 0,\n+      max: 5\n     },\n     numberOfFollowers: {\n       type: Number,\n       default: 0\n@@ -56,23 +94,9 @@\n       type: Number,\n       default: 0\n     }\n   },\n-  achievements: [{\n-    type: String\n-  }],\n-  phoneNumber: {\n-    type: String,\n-    unique: true,\n-    sparse: true\n-  },\n-  address: {\n-    street: String,\n-    city: String,\n-    state: String,\n-    country: String,\n-    zipCode: String\n-  },\n+  // KYC & Verification\n   kycStatus: {\n     type: String,\n     enum: ['pending', 'approved', 'rejected'],\n     default: 'pending'\n@@ -87,45 +111,37 @@\n     match: [/^[A-Z]{5}\\d{4}[A-Z]$/, 'Invalid PAN number format'],\n     uppercase: true,\n     select: false\n   },\n-  bankAccount: {\n-    accountNumber: String,\n-    ifscCode: String,\n-    bankName: String\n-  },\n-  about: String,\n-  profilePhoto: String,\n   governmentId: {\n     type: String,\n     select: false\n   },\n-  googleId: String,\n-  authMethod: {\n+  // Contact Information\n+  phoneNumber: {\n     type: String,\n-    enum: ['email', 'phone', 'google'],\n-    default: 'email'\n+    unique: true,\n+    sparse: true\n   },\n-  walletBalance: {\n-    type: Number,\n-    default: 0,\n-    min: 0\n+  address: {\n+    street: String,\n+    city: String,\n+    state: String,\n+    country: String,\n+    zipCode: String\n   },\n-  outstandingRoyalty: {\n-    type: Number,\n-    default: 0,\n-    min: 0\n-  },\n-  royaltyReceived: {\n-    type: Number,\n-    default: 0,\n-    min: 0\n+  // Bank Details\n+  bankAccount: {\n+    accountNumber: String,\n+    ifscCode: String,\n+    bankName: String,\n+    select: false\n   }\n }, {\n   timestamps: true\n });\n \n-// Hash password before saving\n+// Password Hashing Middleware\n userSchema.pre('save', async function(next) {\n   if (!this.isModified('password')) return next();\n   \n   try {\n@@ -136,12 +152,34 @@\n     next(error);\n   }\n });\n \n-// Method to compare password\n-userSchema.methods.comparePassword = async function(candidatePassword) {\n-  return await bcrypt.compare(candidatePassword, this.password);\n+// Authentication Methods\n+userSchema.methods = {\n+  comparePassword: async function(candidatePassword) {\n+    return bcrypt.compare(candidatePassword, this.password);\n+  },\n+\n+  generateAuthToken: async function() {\n+    const token = jwt.sign(\n+      { \n+        _id: this._id,\n+        role: this.role,\n+        authMethod: this.authMethod\n+      }, \n+      process.env.JWT_SECRET,\n+      { expiresIn: '7d' }\n+    );\n+    \n+    this.tokens.push({ token });\n+    await this.save();\n+    return token;\n+  }\n };\n \n+// Indexes\n+userSchema.index({ email: 1 }, { unique: true });\n+userSchema.index({ 'monthlyRevenue.month': 1 });\n+\n const User = mongoose.model('User', userSchema);\n \n module.exports = User;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741721450098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const mongoose = require('mongoose');\n const bcrypt = require('bcrypt');\n+const jwt = require('jsonwebtoken');\n \n const userSchema = new mongoose.Schema({\n   name: {\n     type: String,\n@@ -22,32 +23,65 @@\n     type: String,\n     enum: ['author', 'admin'],\n     default: 'author'\n   },\n-  badges: [{\n-    type: String\n-  }],\n+  walletBalance: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  },\n+  outstandingRoyalty: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  },\n+  royaltyReceived: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  },\n   monthlyRevenue: [{\n     month: Date,\n-    amount: Number\n+    amount: {\n+      type: Number,\n+      default: 0\n+    }\n   }],\n+  authMethod: {\n+    type: String,\n+    enum: ['email', 'phone', 'google'],\n+    default: 'email'\n+  },\n+  tokens: [{\n+    token: {\n+      type: String,\n+      required: true\n+    }\n+  }],\n+  isActive: {\n+    type: Boolean,\n+    default: true\n+  },\n   profile: {\n     title: String,\n     location: String,\n     memberSince: {\n       type: Date,\n       default: Date.now\n     },\n-    bio: String\n+    bio: String,\n+    profilePhoto: String\n   },\n   authorStats: {\n     numberOfPublications: {\n       type: Number,\n       default: 0\n     },\n     averageRating: {\n       type: Number,\n-      default: 0\n+      default: 0,\n+      min: 0,\n+      max: 5\n     },\n     numberOfFollowers: {\n       type: Number,\n       default: 0\n@@ -56,23 +90,8 @@\n       type: Number,\n       default: 0\n     }\n   },\n-  achievements: [{\n-    type: String\n-  }],\n-  phoneNumber: {\n-    type: String,\n-    unique: true,\n-    sparse: true\n-  },\n-  address: {\n-    street: String,\n-    city: String,\n-    state: String,\n-    country: String,\n-    zipCode: String\n-  },\n   kycStatus: {\n     type: String,\n     enum: ['pending', 'approved', 'rejected'],\n     default: 'pending'\n@@ -87,45 +106,34 @@\n     match: [/^[A-Z]{5}\\d{4}[A-Z]$/, 'Invalid PAN number format'],\n     uppercase: true,\n     select: false\n   },\n-  bankAccount: {\n-    accountNumber: String,\n-    ifscCode: String,\n-    bankName: String\n-  },\n-  about: String,\n-  profilePhoto: String,\n   governmentId: {\n     type: String,\n     select: false\n   },\n-  googleId: String,\n-  authMethod: {\n+  phoneNumber: {\n     type: String,\n-    enum: ['email', 'phone', 'google'],\n-    default: 'email'\n+    unique: true,\n+    sparse: true\n   },\n-  walletBalance: {\n-    type: Number,\n-    default: 0,\n-    min: 0\n+  address: {\n+    street: String,\n+    city: String,\n+    state: String,\n+    country: String,\n+    zipCode: String\n   },\n-  outstandingRoyalty: {\n-    type: Number,\n-    default: 0,\n-    min: 0\n-  },\n-  royaltyReceived: {\n-    type: Number,\n-    default: 0,\n-    min: 0\n+  bankAccount: {\n+    accountNumber: String,\n+    ifscCode: String,\n+    bankName: String,\n+    select: false\n   }\n }, {\n   timestamps: true\n });\n \n-// Hash password before saving\n userSchema.pre('save', async function(next) {\n   if (!this.isModified('password')) return next();\n   \n   try {\n@@ -136,12 +144,32 @@\n     next(error);\n   }\n });\n \n-// Method to compare password\n-userSchema.methods.comparePassword = async function(candidatePassword) {\n-  return await bcrypt.compare(candidatePassword, this.password);\n+userSchema.methods = {\n+  comparePassword: async function(candidatePassword) {\n+    return bcrypt.compare(candidatePassword, this.password);\n+  },\n+\n+  generateAuthToken: async function() {\n+    const token = jwt.sign(\n+      { \n+        _id: this._id,\n+        role: this.role,\n+        authMethod: this.authMethod\n+      }, \n+      process.env.JWT_SECRET,\n+      { expiresIn: '7d' }\n+    );\n+    \n+    this.tokens.push({ token });\n+    await this.save();\n+    return token;\n+  }\n };\n \n+userSchema.index({ email: 1 }, { unique: true });\n+userSchema.index({ 'monthlyRevenue.month': 1 });\n+\n const User = mongoose.model('User', userSchema);\n \n module.exports = User;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741721930858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+const mongoose = require('mongoose');\n+const bcrypt = require('bcrypt');\n+\n+const userSchema = new mongoose.Schema({\n+  name: {\n+    type: String,\n+    required: true,\n+    trim: true\n+  },\n+  email: {\n+    type: String,\n+    required: true,\n+    unique: true,\n+    trim: true,\n+    lowercase: true\n+  },\n+  password: {\n+    type: String,\n+    required: true\n+  },\n+  role: {\n+    type: String,\n+    enum: ['author', 'admin'],\n+    default: 'author'\n+  },\n+  badges: [{\n+    type: String\n+  }],\n+  monthlyRevenue: [Number],\n+  yearlyPerformance: [{\n+    year: Number,\n+    monthlyRevenue: [{\n+      month: Number,\n+      revenue: Number\n+    }]\n+  }],\n+  profile: {\n+    title: String,\n+    location: String,\n+    memberSince: {\n+      type: Date,\n+      default: Date.now\n+    },\n+    bio: String,\n+    profilePhoto: String\n+  },\n+  authorStats: {\n+    numberOfPublications: Number,\n+    averageRating: Number,\n+    numberOfFollowers: Number,\n+    totalWorks: Number\n+  },\n+  achievements: [String],\n+  phoneNumber: String,\n+  address: {\n+    street: String,\n+    city: String,\n+    state: String,\n+    country: String,\n+    zipCode: String\n+  },\n+  kycStatus: {\n+    type: String,\n+    enum: ['pending', 'approved', 'rejected'],\n+    default: 'pending'\n+  },\n+  isActive: {\n+    type: Boolean,\n+    default: true\n+  },\n+  tokens: [{\n+    token: String\n+  }],\n+  about: String,\n+  authMethod: {\n+    type: String,\n+    enum: ['email', 'phone', 'google'],\n+    default: 'email'\n+  },\n+  walletBalance: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  },\n+  outstandingRoyalty: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  },\n+  royaltyReceived: {\n+    type: Number,\n+    default: 0,\n+    min: 0\n+  }\n+}, {\n+  timestamps: true\n+});\n+\n+// Hash password before saving\n+userSchema.pre('save', async function(next) {\n+  if (!this.isModified('password')) return next();\n+  \n+  try {\n+    const salt = await bcrypt.genSalt(10);\n+    this.password = await bcrypt.hash(this.password, salt);\n+    next();\n+  } catch (error) {\n+    next(error);\n+  }\n+});\n+\n+// Method to compare password\n+userSchema.methods.comparePassword = async function(candidatePassword) {\n+  return await bcrypt.compare(candidatePassword, this.password);\n+};\n+\n+const User = mongoose.model('User', userSchema);\n+\n+module.exports = User;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741460352484,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  role: {\n    type: String,\n    enum: ['author', 'admin'],\n    default: 'author'\n  },\n  badges: [{\n    type: String\n  }],\n  monthlyRevenue: [{\n    month: Date,\n    amount: Number\n  }],\n  profile: {\n    title: String,\n    location: String,\n    memberSince: {\n      type: Date,\n      default: Date.now\n    },\n    bio: String\n  },\n  authorStats: {\n    numberOfPublications: {\n      type: Number,\n      default: 0\n    },\n    averageRating: {\n      type: Number,\n      default: 0\n    },\n    numberOfFollowers: {\n      type: Number,\n      default: 0\n    },\n    totalWorks: {\n      type: Number,\n      default: 0\n    }\n  },\n  achievements: [{\n    type: String\n  }],\n  phoneNumber: {\n    type: String,\n    unique: true,\n    sparse: true\n  },\n  address: {\n    street: String,\n    city: String,\n    state: String,\n    country: String,\n    zipCode: String\n  },\n  kycStatus: {\n    type: String,\n    enum: ['pending', 'approved', 'rejected'],\n    default: 'pending'\n  },\n  aadhaarNumber: {\n    type: String,\n    required: [true, 'Aadhaar number is required for KYC'],\n    match: [/^\\d{12}$/, 'Invalid Aadhaar number format'],\n    select: false\n  },\n  panNumber: {\n    type: String,\n    required: [true, 'PAN number is required for KYC'],\n    match: [/^[A-Z]{5}\\d{4}[A-Z]$/, 'Invalid PAN number format'],\n    uppercase: true,\n    select: false\n  },\n  bankAccount: {\n    accountNumber: String,\n    ifscCode: String,\n    bankName: String,\n    accountHolderName: String\n  },\n  about: String,\n  profilePhoto: String,\n  governmentId: {\n    type: String,\n    select: false\n  },\n  googleId: String,\n  authMethod: {\n    type: String,\n    enum: ['email', 'phone', 'google'],\n    default: 'email'\n  },\n  walletBalance: {\n    type: Number,\n    default: 0,\n    min: 0\n  },\n  outstandingRoyalty: {\n    type: Number,\n    default: 0,\n    min: 0\n  },\n  royaltyReceived: {\n    type: Number,\n    default: 0,\n    min: 0\n  }\n}, {\n  timestamps: true\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n  \n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Method to compare password\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return await bcrypt.compare(candidatePassword, this.password);\n};\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;"
        }
    ]
}
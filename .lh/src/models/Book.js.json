{
    "sourceFile": "src/models/Book.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1741460722236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741462269824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+const mongoose = require('mongoose');\n+\n+const bookSchema = new mongoose.Schema({\n+  title: {\n+    type: String,\n+    required: true,\n+    trim: true\n+  },\n+  authorId: {\n+    type: mongoose.Schema.Types.ObjectId,\n+    ref: 'User',\n+    required: true\n+  },\n+  price: {\n+    type: Number,\n+    required: [true, 'Price is required'],\n+    min: [0, 'Price cannot be negative']\n+  },\n+  stock: {\n+    type: Number,\n+    required: true,\n+    min: 0,\n+    default: 0\n+  },\n+  soldCopies: {\n+    type: Number,\n+    default: 0\n+  },\n+  royalties: {\n+    type: Number,\n+    default: 0\n+  },\n+  category: {\n+    type: String,\n+    required: true\n+  },\n+  isbn: {\n+    type: String,\n+    required: true,\n+    unique: true\n+  },\n+  marketplaceLinks: {\n+    amazon: String,\n+    flipkart: String\n+  },\n+  lastMonthSale: {\n+    type: Number,\n+    default: 0\n+  },\n+  publication: {\n+    publicationId: {\n+      type: String,\n+      required: true\n+    },\n+    rating: {\n+      type: Number,\n+      min: 0,\n+      max: 5,\n+      default: 0\n+    },\n+    publishedDate: {\n+      type: Date,\n+      required: true\n+    },\n+    description: {\n+      type: String,\n+      required: true\n+    }\n+  },\n+  sku: String,\n+  gsm: Number,\n+  coverType: {\n+    type: String,\n+    enum: ['Hardcover', 'Paperback']\n+  },\n+  pageSize: String,\n+  interiorColor: {\n+    type: String,\n+    enum: ['Colored', 'Black & White']\n+  },\n+  weight: Number,\n+  language: String,\n+  launchDate: Date,\n+  royaltyPercentage: Number,\n+  mrp: Number,\n+  status: {\n+    type: String,\n+    enum: ['Active', 'Inactive'],\n+    default: 'Active'\n+  },\n+  coverImage: {\n+    type: String,\n+    default: `${process.env.BASE_URL}/book-covers/default-cover.jpg`\n+  },\n+  printingTimeline: [{\n+    stage: {\n+      type: String,\n+      enum: ['ISBN Applied', 'Formatting', 'Cover Design', 'Approval', 'Printing', 'Dispatch', 'Delivered']\n+    },\n+    date: Date,\n+    status: {\n+      type: String,\n+      enum: ['Pending', 'In Progress', 'Completed'],\n+      default: 'Pending'\n+    }\n+  }],\n+  isDeleted: { type: Boolean, default: false },\n+  deletedAt: Date\n+}, {\n+  timestamps: true,\n+  toJSON: { virtuals: true },\n+  toObject: { virtuals: true }\n+});\n+\n+// Virtual for calculating total revenue\n+bookSchema.virtual('totalRevenue').get(function() {\n+  return this.soldCopies * this.price;\n+});\n+\n+// Index for faster queries\n+bookSchema.index({ authorId: 1, title: 1 });\n+bookSchema.index({ isbn: 1 }, { unique: true });\n+\n+const Book = mongoose.model('Book', bookSchema);\n+\n+module.exports = Book;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741463348719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,134 +102,8 @@\n       type: String,\n       enum: ['Pending', 'In Progress', 'Completed'],\n       default: 'Pending'\n     }\n-  }],\n-  isDeleted: { type: Boolean, default: false },\n-  deletedAt: Date\n-}, {\n-  timestamps: true,\n-  toJSON: { virtuals: true },\n-  toObject: { virtuals: true }\n-});\n-\n-// Virtual for calculating total revenue\n-bookSchema.virtual('totalRevenue').get(function() {\n-  return this.soldCopies * this.price;\n-});\n-\n-// Index for faster queries\n-bookSchema.index({ authorId: 1, title: 1 });\n-bookSchema.index({ isbn: 1 }, { unique: true });\n-\n-const Book = mongoose.model('Book', bookSchema);\n-\n-module.exports = Book;\n-const mongoose = require('mongoose');\n-\n-const bookSchema = new mongoose.Schema({\n-  title: {\n-    type: String,\n-    required: true,\n-    trim: true\n-  },\n-  authorId: {\n-    type: mongoose.Schema.Types.ObjectId,\n-    ref: 'User',\n-    required: true\n-  },\n-  price: {\n-    type: Number,\n-    required: [true, 'Price is required'],\n-    min: [0, 'Price cannot be negative']\n-  },\n-  stock: {\n-    type: Number,\n-    required: true,\n-    min: 0,\n-    default: 0\n-  },\n-  soldCopies: {\n-    type: Number,\n-    default: 0\n-  },\n-  royalties: {\n-    type: Number,\n-    default: 0\n-  },\n-  category: {\n-    type: String,\n-    required: true\n-  },\n-  isbn: {\n-    type: String,\n-    required: true,\n-    unique: true\n-  },\n-  marketplaceLinks: {\n-    amazon: String,\n-    flipkart: String\n-  },\n-  lastMonthSale: {\n-    type: Number,\n-    default: 0\n-  },\n-  publication: {\n-    publicationId: {\n-      type: String,\n-      required: true\n-    },\n-    rating: {\n-      type: Number,\n-      min: 0,\n-      max: 5,\n-      default: 0\n-    },\n-    publishedDate: {\n-      type: Date,\n-      required: true\n-    },\n-    description: {\n-      type: String,\n-      required: true\n-    }\n-  },\n-  sku: String,\n-  gsm: Number,\n-  coverType: {\n-    type: String,\n-    enum: ['Hardcover', 'Paperback']\n-  },\n-  pageSize: String,\n-  interiorColor: {\n-    type: String,\n-    enum: ['Colored', 'Black & White']\n-  },\n-  weight: Number,\n-  language: String,\n-  launchDate: Date,\n-  royaltyPercentage: Number,\n-  mrp: Number,\n-  status: {\n-    type: String,\n-    enum: ['Active', 'Inactive'],\n-    default: 'Active'\n-  },\n-  coverImage: {\n-    type: String,\n-    default: `${process.env.BASE_URL}/book-covers/default-cover.jpg`\n-  },\n-  printingTimeline: [{\n-    stage: {\n-      type: String,\n-      enum: ['ISBN Applied', 'Formatting', 'Cover Design', 'Approval', 'Printing', 'Dispatch', 'Delivered']\n-    },\n-    date: Date,\n-    status: {\n-      type: String,\n-      enum: ['Pending', 'In Progress', 'Completed'],\n-      default: 'Pending'\n-    }\n   }]\n }, {\n   timestamps: true,\n   toJSON: { virtuals: true },\n"
                },
                {
                    "date": 1741465825347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,13 @@\n     type: Number,\n     required: [true, 'Price is required'],\n     min: [0, 'Price cannot be negative']\n   },\n+  authorCopyPrice: {\n+    type: Number,\n+    min: [0, 'Author copy price cannot be negative'],\n+    default: 0\n+  },\n   stock: {\n     type: Number,\n     required: true,\n     min: 0,\n"
                },
                {
                    "date": 1741723673469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+const mongoose = require('mongoose');\n+\n+const bookSchema = new mongoose.Schema({\n+  title: {\n+    type: String,\n+    required: true,\n+    trim: \n+  },\n+  authorId: {\n+    type: mongoose.Schema.Types.ObjectId,\n+    ref: 'User',\n+    required: true\n+  },\n+  price: {\n+    type: Number,\n+    required: [true, 'Price is required'],\n+    min: [0, 'Price cannot be negative']\n+  },\n+  authorCopyPrice: {\n+    type: Number,\n+    min: [0, 'Author copy price cannot be negative'],\n+    default: 0\n+  },\n+  stock: {\n+    type: Number,\n+    required: true,\n+    min: 0,\n+    default: 0\n+  },\n+  soldCopies: {\n+    type: Number,\n+    default: 0\n+  },\n+  royalties: {\n+    type: Number,\n+    default: 0\n+  },\n+  category: {\n+    type: String,\n+    required: true\n+  },\n+  isbn: {\n+    type: String,\n+    required: true,\n+    unique: true\n+  },\n+  marketplaceLinks: {\n+    amazon: String,\n+    flipkart: String\n+  },\n+  lastMonthSale: {\n+    type: Number,\n+    default: 0\n+  },\n+  publication: {\n+    publicationId: {\n+      type: String,\n+      required: true\n+    },\n+    rating: {\n+      type: Number,\n+      min: 0,\n+      max: 5,\n+      default: 0\n+    },\n+    publishedDate: {\n+      type: Date,\n+      required: true\n+    },\n+    description: {\n+      type: String,\n+      required: true\n+    }\n+  },\n+  sku: String,\n+  gsm: Number,\n+  coverType: {\n+    type: String,\n+    enum: ['Hardcover', 'Paperback']\n+  },\n+  pageSize: String,\n+  interiorColor: {\n+    type: String,\n+    enum: ['Colored', 'Black & White']\n+  },\n+  weight: Number,\n+  language: String,\n+  launchDate: Date,\n+  royaltyPercentage: Number,\n+  mrp: Number,\n+  status: {\n+    type: String,\n+    enum: ['Active', 'Inactive'],\n+    default: 'Active'\n+  },\n+  coverImage: {\n+    type: String,\n+    default: `${process.env.BASE_URL}/book-covers/default-cover.jpg`\n+  },\n+  printingTimeline: [{\n+    stage: {\n+      type: String,\n+      enum: ['ISBN Applied', 'Formatting', 'Cover Design', 'Approval', 'Printing', 'Dispatch', 'Delivered']\n+    },\n+    date: Date,\n+    status: {\n+      type: String,\n+      enum: ['Pending', 'In Progress', 'Completed'],\n+      default: 'Pending'\n+    }\n+  }]\n+}, {\n+  timestamps: true,\n+  toJSON: { virtuals: true },\n+  toObject: { virtuals: true }\n+});\n+\n+// Virtual for calculating total revenue\n+bookSchema.virtual('totalRevenue').get(function() {\n+  return this.soldCopies * this.price;\n+});\n+\n+// Index for faster queries\n+bookSchema.index({ authorId: 1, title: 1 });\n+bookSchema.index({ isbn: 1 }, { unique: true });\n+\n+const Book = mongoose.model('Book', bookSchema);\n+\n+module.exports = Book;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741460722236,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\n\nconst bookSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  authorId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  price: {\n    type: Number,\n    required: [true, 'Price is required'],\n    min: [0, 'Price cannot be negative']\n  },\n  stock: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 0\n  },\n  soldCopies: {\n    type: Number,\n    default: 0\n  },\n  royalties: {\n    type: Number,\n    default: 0\n  },\n  category: {\n    type: String,\n    required: true\n  },\n  isbn: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  marketplaceLinks: {\n    amazon: String,\n    flipkart: String\n  },\n  lastMonthSale: {\n    type: Number,\n    default: 0\n  },\n  publication: {\n    publicationId: {\n      type: String,\n      required: true\n    },\n    rating: {\n      type: Number,\n      min: 0,\n      max: 5,\n      default: 0\n    },\n    publishedDate: {\n      type: Date,\n      required: true\n    },\n    description: {\n      type: String,\n      required: true\n    }\n  },\n  sku: String,\n  gsm: Number,\n  coverType: {\n    type: String,\n    enum: ['Hardcover', 'Paperback']\n  },\n  pageSize: String,\n  interiorColor: {\n    type: String,\n    enum: ['Colored', 'Black & White']\n  },\n  weight: Number,\n  language: String,\n  launchDate: Date,\n  royaltyPercentage: Number,\n  mrp: Number,\n  status: {\n    type: String,\n    enum: ['Active', 'Inactive'],\n    default: 'Active'\n  },\n  coverImage: {\n    type: String,\n    default: `${process.env.BASE_URL}/book-covers/default-cover.jpg`\n  },\n  printingTimeline: [{\n    stage: {\n      type: String,\n      enum: ['ISBN Applied', 'Formatting', 'Cover Design', 'Approval', 'Printing', 'Dispatch', 'Delivered']\n    },\n    date: Date,\n    status: {\n      type: String,\n      enum: ['Pending', 'In Progress', 'Completed'],\n      default: 'Pending'\n    }\n  }]\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Virtual for calculating total revenue\nbookSchema.virtual('totalRevenue').get(function() {\n  return this.soldCopies * this.price;\n});\n\n// Index for faster queries\nbookSchema.index({ authorId: 1, title: 1 });\nbookSchema.index({ isbn: 1 }, { unique: true });\n\nconst Book = mongoose.model('Book', bookSchema);\n\nmodule.exports = Book;"
        }
    ]
}
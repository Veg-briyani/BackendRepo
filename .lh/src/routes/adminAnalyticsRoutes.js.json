{
    "sourceFile": "src/routes/adminAnalyticsRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741463577570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741463616113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,1 @@\n-const express = require('express');\n-const router = express.Router();\n-const { auth, authorizeRole } = require('../middleware/auth');\n-const Book = require('../models/Book');\n-const User = require('../models/User');\n-\n-router.use(auth, authorizeRole(['admin']));\n-\n-router.get('/stats', async (req, res) => {\n-  try {\n-    const [users, books, royalties] = await Promise.all([\n-      User.countDocuments(),\n-      Book.countDocuments(),\n-      Royalty.aggregate([{ $group: { _id: null, total: { $sum: \"$amount\" } } }])\n-    ]);\n-\n-    res.json({\n-      totalUsers: users,\n-      totalBooks: books,\n-      totalRoyaltiesPaid: royalties[0]?.total || 0,\n-      activeAuthors: await User.countDocuments({ role: 'author' }),\n-      pendingKYCs: await User.countDocuments({ kycStatus: 'pending' })\n-    });\n-  } catch (error) {\n-    res.status(500).json({ message: 'Error fetching stats', error: error.message });\n-  }\n-});\n-\n-module.exports = router; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741463577570,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst { auth, authorizeRole } = require('../middleware/auth');\nconst Book = require('../models/Book');\nconst User = require('../models/User');\n\nrouter.use(auth, authorizeRole(['admin']));\n\nrouter.get('/stats', async (req, res) => {\n  try {\n    const [users, books, royalties] = await Promise.all([\n      User.countDocuments(),\n      Book.countDocuments(),\n      Royalty.aggregate([{ $group: { _id: null, total: { $sum: \"$amount\" } } }])\n    ]);\n\n    res.json({\n      totalUsers: users,\n      totalBooks: books,\n      totalRoyaltiesPaid: royalties[0]?.total || 0,\n      activeAuthors: await User.countDocuments({ role: 'author' }),\n      pendingKYCs: await User.countDocuments({ kycStatus: 'pending' })\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Error fetching stats', error: error.message });\n  }\n});\n\nmodule.exports = router; "
        }
    ]
}
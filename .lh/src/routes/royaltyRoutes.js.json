{
    "sourceFile": "src/routes/royaltyRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741464631484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741464631484,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst { auth, authorizeRole } = require('../middleware/auth');\nconst Royalty = require('../models/Royalty');\nconst User = require('../models/User');\nconst { validatePayoutRequest } = require('../middleware/validation');\nconst Notification = require('../models/Notification');\n\n// Get author's royalty payouts\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const royalties = await Royalty.find({ authorId: req.user._id })\n      .populate('bookId', 'title isbn')\n      .sort({ createdAt: -1 });\n      \n    res.json(royalties);\n  } catch (error) {\n    res.status(500).json({ \n      message: 'Error fetching royalties',\n      error: error.message \n    });\n  }\n});\n\n// Request royalty payout\nrouter.post('/request', auth, validatePayoutRequest, async (req, res) => {\n  try {\n    const { amount, paymentMethod } = req.body;\n    \n    // Check available balance\n    const author = await User.findById(req.user._id);\n    if (author.walletBalance < amount) {\n      return res.status(400).json({ \n        message: 'Insufficient wallet balance' \n      });\n    }\n\n    // Create payout request\n    const royalty = new Royalty({\n      authorId: req.user._id,\n      amount,\n      paymentMethod,\n      status: 'Pending'\n    });\n\n    await royalty.save();\n\n    // Deduct from wallet balance\n    author.walletBalance -= amount;\n    await author.save();\n\n    res.status(201).json({\n      message: 'Payout request submitted',\n      royalty\n    });\n  } catch (error) {\n    res.status(500).json({ \n      message: 'Error creating payout request',\n      error: error.message \n    });\n  }\n});\n\n// Process payout (Admin)\nrouter.post('/process-payout/:id', auth, authorizeRole(['admin']), async (req, res) => {\n  try {\n    const royalty = await Royalty.findById(req.params.id);\n    \n    if (!royalty) {\n      return res.status(404).json({ message: 'Payout not found' });\n    }\n\n    if (royalty.status !== 'Pending') {\n      return res.status(400).json({ \n        message: 'Payout already processed' \n      });\n    }\n\n    // Add balance tracking\n    const author = await User.findById(royalty.authorId);\n    royalty.previousBalance = author.outstandingRoyalty;\n    \n    // Process payment here (integrate with payment gateway)\n    // For now, simulate successful payment\n    royalty.status = 'Paid';\n    royalty.transactionId = `TX${Date.now()}`;\n    royalty.paymentDate = new Date();\n    royalty.newBalance = royalty.previousBalance - royalty.amount;\n    \n    await royalty.save();\n\n    // After processing payout\n    const notification = new Notification({\n      recipient: royalty.authorId,\n      message: `Your payout of ₹${royalty.amount} via ${royalty.paymentMethod} has been processed`,\n      type: 'payout',\n      metadata: {\n        payoutId: royalty._id,\n        status: 'processed'\n      }\n    });\n    await notification.save();\n\n    res.json({ \n      message: 'Payout processed successfully',\n      royalty\n    });\n  } catch (error) {\n    res.status(500).json({ \n      message: 'Error processing payout',\n      error: error.message \n    });\n  }\n});\n\n// Get all payouts (Admin)\nrouter.get('/all', auth, authorizeRole(['admin']), async (req, res) => {\n  try {\n    const royalties = await Royalty.find()\n      .populate('authorId', 'name email')\n      .populate('bookId', 'title')\n      .sort({ createdAt: -1 });\n\n    res.json(royalties);\n  } catch (error) {\n    res.status(500).json({ \n      message: 'Error fetching payouts',\n      error: error.message \n    });\n  }\n});\n\n// Add this route above the existing process-payout route\nrouter.post('/:id/approve', auth, authorizeRole(['admin']), async (req, res) => {\n  try {\n    const royalty = await Royalty.findById(req.params.id)\n      .populate('authorId', 'name email');\n    \n    if (!royalty) {\n      return res.status(404).json({ message: 'Payout not found' });\n    }\n\n    if (royalty.status !== 'Pending') {\n      return res.status(400).json({ message: 'Payout already processed' });\n    }\n\n    // Update payout status\n    royalty.status = 'Approved';\n    royalty.paymentDate = new Date();\n    await royalty.save();\n\n    // Send notification to author\n    const notification = new Notification({\n      recipient: royalty.authorId._id,\n      message: `Your payout request of ₹${royalty.amount} has been approved`,\n      type: 'payout',\n      metadata: {\n        payoutId: royalty._id,\n        status: 'approved'\n      }\n    });\n    await notification.save();\n\n    res.json({ \n      message: 'Payout approved successfully',\n      royalty \n    });\n  } catch (error) {\n    res.status(500).json({ \n      message: 'Error approving payout',\n      error: error.message \n    });\n  }\n});\n\nmodule.exports = router; "
        }
    ]
}
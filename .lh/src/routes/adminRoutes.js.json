{
    "sourceFile": "src/routes/adminRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1741462271504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741463348718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,10 @@\n \n // User Management\n router.get('/users', async (req, res) => {\n   try {\n-    const { page = 1, limit = 20, search } = req.query;\n-    const query = search ? { name: { $regex: search, $options: 'i' } } : {};\n-    const users = await User.find(query)\n-      .skip((page - 1) * limit)\n-      .limit(limit);\n+    const users = await User.find({}, '-password')\n+      .sort({ createdAt: -1 });\n     res.json(users);\n   } catch (error) {\n     res.status(500).json({\n       message: 'Error fetching users',\n"
                },
                {
                    "date": 1741463575571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,24 @@\n     });\n   }\n });\n \n+// Add to User Management section\n+router.get('/users/search', async (req, res) => {\n+  try {\n+    const { query } = req.query;\n+    const users = await User.find({\n+      $or: [\n+        { name: { $regex: query, $options: 'i' } },\n+        { email: { $regex: query, $options: 'i' } }\n+      ]\n+    }).select('-password');\n+    res.json(users);\n+  } catch (error) {\n+    res.status(500).json({ message: 'Search failed', error: error.message });\n+  }\n+});\n+\n // Book Management\n router.get('/books', async (req, res) => {\n   try {\n     const books = await Book.find()\n"
                },
                {
                    "date": 1741463616114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,24 +68,8 @@\n     });\n   }\n });\n \n-// Add to User Management section\n-router.get('/users/search', async (req, res) => {\n-  try {\n-    const { query } = req.query;\n-    const users = await User.find({\n-      $or: [\n-        { name: { $regex: query, $options: 'i' } },\n-        { email: { $regex: query, $options: 'i' } }\n-      ]\n-    }).select('-password');\n-    res.json(users);\n-  } catch (error) {\n-    res.status(500).json({ message: 'Search failed', error: error.message });\n-  }\n-});\n-\n // Book Management\n router.get('/books', async (req, res) => {\n   try {\n     const books = await Book.find()\n"
                },
                {
                    "date": 1741464913088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n const router = express.Router();\n const { auth, authorizeRole } = require('../middleware/auth');\n const User = require('../models/User');\n const Book = require('../models/Book');\n+const Royalty = require('../models/Royalty');\n+const Notification = require('../models/Notification');\n \n // All routes require authentication and admin role\n router.use(auth, authorizeRole(['admin']));\n \n@@ -173,5 +175,47 @@\n     res.status(500).json({ message: 'Error fetching pending KYCs', error: error.message });\n   }\n });\n \n+router.post('/royalties/:id/approve', async (req, res) => {\n+  try {\n+    const royalty = await Royalty.findById(req.params.id)\n+      .populate('authorId', 'name email');\n+    \n+    if (!royalty) {\n+      return res.status(404).json({ message: 'Payout not found' });\n+    }\n+\n+    if (royalty.status !== 'Pending') {\n+      return res.status(400).json({ message: 'Payout already processed' });\n+    }\n+\n+    // Update payout status\n+    royalty.status = 'Approved';\n+    royalty.paymentDate = new Date();\n+    await royalty.save();\n+\n+    // Send notification to author\n+    const notification = new Notification({\n+      recipient: royalty.authorId._id,\n+      message: `Your payout request of ₹${royalty.amount} has been approved`,\n+      type: 'payout',\n+      metadata: {\n+        payoutId: royalty._id,\n+        status: 'approved'\n+      }\n+    });\n+    await notification.save();\n+\n+    res.json({ \n+      message: 'Payout approved successfully',\n+      royalty \n+    });\n+  } catch (error) {\n+    res.status(500).json({ \n+      message: 'Error approving payout',\n+      error: error.message \n+    });\n+  }\n+});\n+\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741465028886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,5 +217,48 @@\n     });\n   }\n });\n \n+router.post('/royalties/:id/reject', async (req, res) => {\n+  try {\n+    const { rejectionReason } = req.body;\n+    const royalty = await Royalty.findById(req.params.id)\n+      .populate('authorId', 'name email');\n+\n+    if (!royalty) {\n+      return res.status(404).json({ message: 'Payout not found' });\n+    }\n+\n+    if (royalty.status !== 'Pending') {\n+      return res.status(400).json({ message: 'Payout already processed' });\n+    }\n+\n+    // Update payout status and rejection reason\n+    royalty.status = 'Rejected';\n+    royalty.rejectionReason = rejectionReason;\n+    await royalty.save();\n+\n+    // Send notification to author\n+    const notification = new Notification({\n+      recipient: royalty.authorId._id,\n+      message: `Your payout request of ₹${royalty.amount} was rejected. Reason: ${rejectionReason}`,\n+      type: 'payout',\n+      metadata: {\n+        payoutId: royalty._id,\n+        status: 'rejected'\n+      }\n+    });\n+    await notification.save();\n+\n+    res.json({ \n+      message: 'Payout rejected successfully',\n+      royalty \n+    });\n+  } catch (error) {\n+    res.status(500).json({ \n+      message: 'Error rejecting payout',\n+      error: error.message \n+    });\n+  }\n+});\n+\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741467145123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n const User = require('../models/User');\n const Book = require('../models/Book');\n const Royalty = require('../models/Royalty');\n const Notification = require('../models/Notification');\n+const { validateAuthorPrice } = require('../middleware/validation');\n \n // All routes require authentication and admin role\n router.use(auth, authorizeRole(['admin']));\n \n@@ -260,5 +261,32 @@\n     });\n   }\n });\n \n+router.put('/books/:id/author-price', \n+  validateAuthorPrice,\n+  async (req, res) => {\n+    try {\n+      const book = await Book.findByIdAndUpdate(\n+        req.params.id,\n+        { $set: { authorCopyPrice: req.body.price } },\n+        { new: true, runValidators: true }\n+      );\n+\n+      if (!book) {\n+        return res.status(404).json({ message: 'Book not found' });\n+      }\n+\n+      res.json({\n+        message: 'Author price updated successfully',\n+        book\n+      });\n+    } catch (error) {\n+      res.status(500).json({\n+        message: 'Error updating author price',\n+        error: error.message\n+      });\n+    }\n+  }\n+);\n+\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741467529845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const Book = require('../models/Book');\n const Royalty = require('../models/Royalty');\n const Notification = require('../models/Notification');\n const { validateAuthorPrice } = require('../middleware/validation');\n+const Order = require('../models/Order');\n \n // All routes require authentication and admin role\n router.use(auth, authorizeRole(['admin']));\n \n@@ -288,5 +289,21 @@\n     }\n   }\n );\n \n+router.get('/orders', async (req, res) => {\n+  try {\n+    const orders = await Order.find()\n+      .populate('author', 'name email')\n+      .populate('book', 'title price authorCopyPrice')\n+      .sort({ createdAt: -1 });\n+\n+    res.json(orders);\n+  } catch (error) {\n+    res.status(500).json({\n+      message: 'Error fetching orders',\n+      error: error.message\n+    });\n+  }\n+});\n+\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741622992017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n const Royalty = require('../models/Royalty');\n const Notification = require('../models/Notification');\n const { validateAuthorPrice } = require('../middleware/validation');\n const Order = require('../models/Order');\n+const PrintLog = require('../models/PrintLog');\n \n // All routes require authentication and admin role\n router.use(auth, authorizeRole(['admin']));\n \n@@ -166,9 +167,9 @@\n     res.status(500).json({ message: 'Error updating KYC status', error: error.message });\n   }\n });\n \n-router.get('/kyc/pending', async (req, res) => {\n+router.get('/kyc', async (req, res) => {\n   try {\n     const pendingKYCs = await User.find({ kycStatus: 'pending' })\n       .select('name email phoneNumber createdAt')\n       .sort({ createdAt: -1 });\n@@ -305,5 +306,65 @@\n     });\n   }\n });\n \n+// User Management\n+router.get('/users/kyc', async (req, res) => {\n+  try {\n+    const pendingKYCs = await User.find({ kycStatus: 'pending' })\n+      .select('name email phoneNumber createdAt governmentId')\n+      .sort({ createdAt: -1 });\n+    res.json(pendingKYCs);\n+  } catch (error) {\n+    res.status(500).json({ message: 'Error fetching pending KYCs', error: error.message });\n+  }\n+});\n+\n+// Print Management\n+router.get('/print-logs', async (req, res) => {\n+  try {\n+    const printLogs = await PrintLog.find()\n+      .populate('bookId authorId', 'title name')\n+      .sort({ printDate: -1 });\n+    res.json(printLogs);\n+  } catch (error) {\n+    res.status(500).json({ message: 'Error fetching print logs', error: error.message });\n+  }\n+});\n+\n+// Royalty Management\n+router.get('/payouts/history', async (req, res) => {\n+  try {\n+    const payouts = await Royalty.find()\n+      .populate('authorId', 'name email')\n+      .sort({ paymentDate: -1 });\n+    res.json(payouts);\n+  } catch (error) {\n+    res.status(500).json({ message: 'Error fetching payout history', error: error.message });\n+  }\n+});\n+\n+// Notifications\n+router.get('/notifications', async (req, res) => {\n+  try {\n+    const notifications = await Notification.find({ type: 'admin' })\n+      .populate('recipient', 'name email')\n+      .sort({ createdAt: -1 });\n+    res.json(notifications);\n+  } catch (error) {\n+    res.status(500).json({ message: 'Error fetching notifications', error: error.message });\n+  }\n+});\n+\n+// Add single user GET endpoint\n+router.get('/users/:id', async (req, res) => {\n+  try {\n+    const user = await User.findById(req.params.id)\n+      .select('-password -governmentId');\n+    if (!user) return res.status(404).json({ message: 'User not found' });\n+    res.json(user);\n+  } catch (error) {\n+    res.status(500).json({ message: 'Error fetching user', error: error.message });\n+  }\n+});\n+\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741724136460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const User = require('../models/User');\n const Book = require('../models/Book');\n const Royalty = require('../models/Royalty');\n const Notification = require('../models/Notification');\n-const { validateAuthorPrice } = require('../middleware/validation');\n+const { validateAuthorPrice, validateUserRevenue } = require('../middleware/validation');\n const Order = require('../models/Order');\n const PrintLog = require('../models/PrintLog');\n \n // All routes require authentication and admin role\n@@ -366,5 +366,37 @@\n     res.status(500).json({ message: 'Error fetching user', error: error.message });\n   }\n });\n \n+router.put('/users/:id/revenue', \n+  auth, \n+  authorizeRole(['admin']), \n+  validateUserRevenue,\n+  async (req, res) => {\n+    try {\n+      const user = await User.findByIdAndUpdate(\n+        req.params.id,\n+        { \n+          $set: { \n+            monthlyRevenue: req.body.monthlyRevenue,\n+            yearlyPerformance: req.body.yearlyPerformance\n+          }\n+        },\n+        { new: true, runValidators: true }\n+      ).select('-password');\n+\n+      if (!user) return res.status(404).json({ message: 'User not found' });\n+      \n+      res.json({ \n+        message: 'Revenue data updated successfully',\n+        user\n+      });\n+    } catch (error) {\n+      res.status(500).json({ \n+        message: 'Error updating revenue data',\n+        error: error.message \n+      });\n+    }\n+  }\n+);\n+\n module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741462271504,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst { auth, authorizeRole } = require('../middleware/auth');\nconst User = require('../models/User');\nconst Book = require('../models/Book');\n\n// All routes require authentication and admin role\nrouter.use(auth, authorizeRole(['admin']));\n\n// User Management\nrouter.get('/users', async (req, res) => {\n  try {\n    const { page = 1, limit = 20, search } = req.query;\n    const query = search ? { name: { $regex: search, $options: 'i' } } : {};\n    const users = await User.find(query)\n      .skip((page - 1) * limit)\n      .limit(limit);\n    res.json(users);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching users',\n      error: error.message\n    });\n  }\n});\n\nrouter.put('/users/:id', async (req, res) => {\n  try {\n    const updates = req.body;\n    delete updates.password; // Prevent password update through this route\n\n    const user = await User.findByIdAndUpdate(\n      req.params.id,\n      { $set: updates },\n      { new: true, runValidators: true }\n    ).select('-password -governmentId');\n\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    res.json({\n      message: 'User updated successfully',\n      user\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error updating user',\n      error: error.message\n    });\n  }\n});\n\nrouter.delete('/users/:id', async (req, res) => {\n  try {\n    const user = await User.findByIdAndDelete(req.params.id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // Delete all books associated with the user\n    await Book.deleteMany({ authorId: req.params.id });\n\n    res.json({\n      message: 'User and associated books deleted successfully'\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error deleting user',\n      error: error.message\n    });\n  }\n});\n\n// Book Management\nrouter.get('/books', async (req, res) => {\n  try {\n    const books = await Book.find()\n      .populate('authorId', 'name email')\n      .sort({ createdAt: -1 });\n    res.json(books);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching books',\n      error: error.message\n    });\n  }\n});\n\nrouter.put('/books/:id', async (req, res) => {\n  try {\n    const book = await Book.findByIdAndUpdate(\n      req.params.id,\n      { $set: req.body },\n      { new: true, runValidators: true }\n    ).populate('authorId', 'name email');\n\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    res.json({\n      message: 'Book updated successfully',\n      book\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error updating book',\n      error: error.message\n    });\n  }\n});\n\nrouter.delete('/books/:id', async (req, res) => {\n  try {\n    const book = await Book.findByIdAndDelete(req.params.id);\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n\n    // Update author's stats\n    await User.findByIdAndUpdate(book.authorId, {\n      $inc: {\n        'authorStats.numberOfPublications': -1,\n        'authorStats.totalWorks': -1\n      }\n    });\n\n    res.json({\n      message: 'Book deleted successfully',\n      book\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error deleting book',\n      error: error.message\n    });\n  }\n});\n\nrouter.post('/kyc/approve/:userId', async (req, res) => {\n  try {\n    const { status, rejectionReason } = req.body;\n    const update = { \n      kycStatus: status,\n      ...(status === 'rejected' && { rejectionReason })\n    };\n\n    const user = await User.findByIdAndUpdate(\n      req.params.userId,\n      update,\n      { new: true }\n    ).select('-password -governmentId');\n\n    // Send notification email to author\n    const emailTemplate = getKYCStatusTemplate(user, status, rejectionReason);\n    await sendEmail({\n      to: user.email,\n      subject: emailTemplate.subject,\n      html: emailTemplate.html\n    });\n\n    res.json({ message: `KYC ${status} successfully`, user });\n  } catch (error) {\n    res.status(500).json({ message: 'Error updating KYC status', error: error.message });\n  }\n});\n\nrouter.get('/kyc/pending', async (req, res) => {\n  try {\n    const pendingKYCs = await User.find({ kycStatus: 'pending' })\n      .select('name email phoneNumber createdAt')\n      .sort({ createdAt: -1 });\n    res.json(pendingKYCs);\n  } catch (error) {\n    res.status(500).json({ message: 'Error fetching pending KYCs', error: error.message });\n  }\n});\n\nmodule.exports = router;"
        }
    ]
}
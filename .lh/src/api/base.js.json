{
    "sourceFile": "src/api/base.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741471991685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741472051279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,1 @@\n-import axios from 'axios';\n-import { refreshToken } from './auth';\n-\n-const api = axios.create({\n-  baseURL: import.meta.env.VITE_API_URL,\n-});\n-\n-api.interceptors.request.use(config => {\n-  const token = localStorage.getItem('accessToken');\n-  if (token) {\n-    config.headers.Authorization = `Bearer ${token}`;\n-  }\n-  return config;\n-});\n-\n-api.interceptors.response.use(\n-  response => response,\n-  async error => {\n-    const originalRequest = error.config;\n-    if (error.response.status === 401 && !originalRequest._retry) {\n-      originalRequest._retry = true;\n-      const newToken = await refreshToken();\n-      axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n-      return api(originalRequest);\n-    }\n-    return Promise.reject(error);\n-  }\n-);\n-\n-export default api; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741471991685,
            "name": "Commit-0",
            "content": "import axios from 'axios';\nimport { refreshToken } from './auth';\n\nconst api = axios.create({\n  baseURL: import.meta.env.VITE_API_URL,\n});\n\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\napi.interceptors.response.use(\n  response => response,\n  async error => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      const newToken = await refreshToken();\n      axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      return api(originalRequest);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api; "
        }
    ]
}